// --------- This code has been automatically generated !!! 2018-04-20T14:13:31.037Z
"use strict";
require("requirish")._(module);
/**
 * @module opcua.address_space.types
 */
var assert = require("better-assert");
var util = require("util");
var _  = require("underscore");
var makeNodeId = require("lib/datamodel/nodeid").makeNodeId;
var schema_helpers =  require("lib/misc/factories_schema_helpers");
var extract_all_fields                       = schema_helpers.extract_all_fields;
var resolve_schema_field_types               = schema_helpers.resolve_schema_field_types;
var initialize_field                         = schema_helpers.initialize_field;
var initialize_field_array                   = schema_helpers.initialize_field_array;
var check_options_correctness_against_schema = schema_helpers.check_options_correctness_against_schema;
var _defaultTypeMap = require("lib/misc/factories_builtin_types")._defaultTypeMap;
var ec = require("lib/misc/encode_decode");
var encodeArray = ec.encodeArray;
var decodeArray = ec.decodeArray;
var makeExpandedNodeId = ec.makeExpandedNodeId;
var generate_new_id = require("lib/misc/factories").generate_new_id;
var _enumerations = require("lib/misc/factories_enumerations")._private._enumerations;
var schema = require("../schemas/AcknowledgeMessage_schema").AcknowledgeMessage_Schema;
var BaseUAObject = require("lib/misc/factories_baseobject").BaseUAObject;

/**
 * 
 * @class AcknowledgeMessage
 * @constructor
 * @extends BaseUAObject
 * @param  options {Object}
 * @param  [options.protocolVersion] {UInt32} The latest version of the OPC UA TCP protocol supported by the Server.
 * @param  [options.receiveBufferSize] {UInt32} 
 * @param  [options.sendBufferSize] {UInt32} 
 * @param  [options.maxMessageSize] {UInt32} The maximum size for any request message.
 * @param  [options.maxChunkCount] {UInt32} The maximum number of chunks in any request message.
 */
function AcknowledgeMessage(options)
{
    options = options || {};
    /* istanbul ignore next */
    if (schema_helpers.doDebug) { check_options_correctness_against_schema(this,schema,options); }
    var self = this;
    assert(this instanceof BaseUAObject); //  ' keyword "new" is required for constructor call')
    resolve_schema_field_types(schema);

    BaseUAObject.call(this,options);

    /**
      * The latest version of the OPC UA TCP protocol supported by the Server.
      * @property protocolVersion
      * @type {UInt32}
      */
    self.protocolVersion = initialize_field(schema.fields[0], options.protocolVersion);

    /**
      * 
      * @property receiveBufferSize
      * @type {UInt32}
      */
    self.receiveBufferSize = initialize_field(schema.fields[1], options.receiveBufferSize);

    /**
      * 
      * @property sendBufferSize
      * @type {UInt32}
      */
    self.sendBufferSize = initialize_field(schema.fields[2], options.sendBufferSize);

    /**
      * The maximum size for any request message.
      * @property maxMessageSize
      * @type {UInt32}
      */
    self.maxMessageSize = initialize_field(schema.fields[3], options.maxMessageSize);

    /**
      * The maximum number of chunks in any request message.
      * @property maxChunkCount
      * @type {UInt32}
      */
    self.maxChunkCount = initialize_field(schema.fields[4], options.maxChunkCount);

   // Object.preventExtensions(self);
}
util.inherits(AcknowledgeMessage,BaseUAObject);
schema.id = generate_new_id();
AcknowledgeMessage.prototype.encodingDefaultBinary = makeExpandedNodeId(schema.id);
AcknowledgeMessage.prototype._schema = schema;

var encode_UInt32 = _defaultTypeMap.UInt32.encode;
var decode_UInt32 = _defaultTypeMap.UInt32.decode;
/**
 * encode the object into a binary stream
 * @method encode
 *
 * @param stream {BinaryStream} 
 */
AcknowledgeMessage.prototype.encode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.encode.call(this,stream,options);
    encode_UInt32(this.protocolVersion,stream);
    encode_UInt32(this.receiveBufferSize,stream);
    encode_UInt32(this.sendBufferSize,stream);
    encode_UInt32(this.maxMessageSize,stream);
    encode_UInt32(this.maxChunkCount,stream);
};
/**
 * decode the object from a binary stream
 * @method decode
 *
 * @param stream {BinaryStream} 
 * @param [option] {object} 
 */
AcknowledgeMessage.prototype.decode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.decode.call(this,stream,options);
    this.protocolVersion = decode_UInt32(stream,options);
    this.receiveBufferSize = decode_UInt32(stream,options);
    this.sendBufferSize = decode_UInt32(stream,options);
    this.maxMessageSize = decode_UInt32(stream,options);
    this.maxChunkCount = decode_UInt32(stream,options);
};
AcknowledgeMessage.possibleFields = [
  "protocolVersion",
         "receiveBufferSize",
         "sendBufferSize",
         "maxMessageSize",
         "maxChunkCount"
];


exports.AcknowledgeMessage = AcknowledgeMessage;
var register_class_definition = require("lib/misc/factories_factories").register_class_definition;
register_class_definition("AcknowledgeMessage",AcknowledgeMessage);
