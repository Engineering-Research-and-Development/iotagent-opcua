// --------- This code has been automatically generated !!! 2018-04-20T14:13:31.430Z
"use strict";
require("requirish")._(module);
/**
 * @module opcua.address_space.types
 */
var assert = require("better-assert");
var util = require("util");
var _  = require("underscore");
var makeNodeId = require("lib/datamodel/nodeid").makeNodeId;
var schema_helpers =  require("lib/misc/factories_schema_helpers");
var extract_all_fields                       = schema_helpers.extract_all_fields;
var resolve_schema_field_types               = schema_helpers.resolve_schema_field_types;
var initialize_field                         = schema_helpers.initialize_field;
var initialize_field_array                   = schema_helpers.initialize_field_array;
var check_options_correctness_against_schema = schema_helpers.check_options_correctness_against_schema;
var _defaultTypeMap = require("lib/misc/factories_builtin_types")._defaultTypeMap;
var ec = require("lib/misc/encode_decode");
var encodeArray = ec.encodeArray;
var decodeArray = ec.decodeArray;
var makeExpandedNodeId = ec.makeExpandedNodeId;
var generate_new_id = require("lib/misc/factories").generate_new_id;
var _enumerations = require("lib/misc/factories_enumerations")._private._enumerations;
var schema = require("../schemas/Argument_schema").Argument_Schema;
var LocalizedText = require("./_auto_generated_LocalizedText").LocalizedText;
var BaseUAObject = require("lib/misc/factories_baseobject").BaseUAObject;

/**
 * An argument for a method.
 * 
 * @class Argument
 * @constructor
 * @extends BaseUAObject
 * @param  options {Object}
 * @param  [options.name] {String} The name of the argument.
 * @param  [options.dataType] {NodeId} The nodeId of the Data type of the argument.
 * @param  [options.valueRank = -1] {Int32} Whether the argument is an array type and the rank of the array if it is.
 * @param  [options.arrayDimensions = null] {UInt32[]} The number of dimensions if the argument is an array type and one or more dimensions have a fixed length.
 * @param  [options.description] {LocalizedText} The description for the argument.
 */
function Argument(options)
{
    options = options || {};
    /* istanbul ignore next */
    if (schema_helpers.doDebug) { check_options_correctness_against_schema(this,schema,options); }
    var self = this;
    assert(this instanceof BaseUAObject); //  ' keyword "new" is required for constructor call')
    resolve_schema_field_types(schema);

    //construction hook
    options = schema.construct_hook(options); 
    BaseUAObject.call(this,options);

    /**
      * The name of the argument.
      * @property name
      * @type {String}
      */
    self.name = initialize_field(schema.fields[0], options.name);

    /**
      * The nodeId of the Data type of the argument.
      * @property dataType
      * @type {NodeId}
      */
    self.dataType = initialize_field(schema.fields[1], options.dataType);

    /**
      * Whether the argument is an array type and the rank of the array if it is.
      * @property valueRank
      * @type {Int32}
      * @default  -1
      */
    self.valueRank = initialize_field(schema.fields[2], options.valueRank);

    /**
      * The number of dimensions if the argument is an array type and one or more dimensions have a fixed length.
      * @property arrayDimensions
      * @type {UInt32[]}
      * @default  null
      */
    self.arrayDimensions = initialize_field_array(schema.fields[3], options.arrayDimensions);

    /**
      * The description for the argument.
      * @property description
      * @type {LocalizedText}
      */
    self.description =  new LocalizedText( options.description);

   // Object.preventExtensions(self);
}
util.inherits(Argument,BaseUAObject);
Argument.prototype.encodingDefaultBinary = makeExpandedNodeId(298,0);
Argument.prototype.encodingDefaultXml = makeExpandedNodeId(297,0);
Argument.prototype._schema = schema;

var encode_String = _defaultTypeMap.String.encode;
var decode_String = _defaultTypeMap.String.decode;
var encode_NodeId = _defaultTypeMap.NodeId.encode;
var decode_NodeId = _defaultTypeMap.NodeId.decode;
var encode_Int32 = _defaultTypeMap.Int32.encode;
var decode_Int32 = _defaultTypeMap.Int32.decode;
var encode_UInt32 = _defaultTypeMap.UInt32.encode;
var decode_UInt32 = _defaultTypeMap.UInt32.decode;
/**
 * encode the object into a binary stream
 * @method encode
 *
 * @param stream {BinaryStream} 
 */
Argument.prototype.encode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.encode.call(this,stream,options);
    encode_String(this.name,stream);
    encode_NodeId(this.dataType,stream);
    encode_Int32(this.valueRank,stream);
    encodeArray(this.arrayDimensions, stream, encode_UInt32);
   this.description.encode(stream,options);
};
/**
 * decode the object from a binary stream
 * @method decode
 *
 * @param stream {BinaryStream} 
 * @param [option] {object} 
 */
Argument.prototype.decode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.decode.call(this,stream,options);
    this.name = decode_String(stream,options);
    this.dataType = decode_NodeId(stream,options);
    this.valueRank = decode_Int32(stream,options);
    this.arrayDimensions = decodeArray(stream, decode_UInt32);
    this.description.decode(stream,options);
};
Argument.possibleFields = [
  "name",
         "dataType",
         "valueRank",
         "arrayDimensions",
         "description"
];


exports.Argument = Argument;
var register_class_definition = require("lib/misc/factories_factories").register_class_definition;
register_class_definition("Argument",Argument);
