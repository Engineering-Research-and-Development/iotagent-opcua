// --------- This code has been automatically generated !!! 2018-04-20T14:13:31.608Z
"use strict";
require("requirish")._(module);
/**
 * @module opcua.address_space.types
 */
var assert = require("better-assert");
var util = require("util");
var _  = require("underscore");
var makeNodeId = require("lib/datamodel/nodeid").makeNodeId;
var schema_helpers =  require("lib/misc/factories_schema_helpers");
var extract_all_fields                       = schema_helpers.extract_all_fields;
var resolve_schema_field_types               = schema_helpers.resolve_schema_field_types;
var initialize_field                         = schema_helpers.initialize_field;
var initialize_field_array                   = schema_helpers.initialize_field_array;
var check_options_correctness_against_schema = schema_helpers.check_options_correctness_against_schema;
var _defaultTypeMap = require("lib/misc/factories_builtin_types")._defaultTypeMap;
var ec = require("lib/misc/encode_decode");
var encodeArray = ec.encodeArray;
var decodeArray = ec.decodeArray;
var makeExpandedNodeId = ec.makeExpandedNodeId;
var generate_new_id = require("lib/misc/factories").generate_new_id;
var _enumerations = require("lib/misc/factories_enumerations")._private._enumerations;
var schema = require("../schemas/ParsingResult_schema").ParsingResult_Schema;
var DiagnosticInfo = require("./_auto_generated_DiagnosticInfo").DiagnosticInfo;
var BaseUAObject = require("lib/misc/factories_baseobject").BaseUAObject;

/**
 * 
 * @class ParsingResult
 * @constructor
 * @extends BaseUAObject
 * @param  options {Object}
 * @param  [options.statusCode] {StatusCode} Parsing result for the requested NodeTypeDescription
 * @param  [options.dataStatusCodes] {StatusCode[]} 
 * @param  [options.dataDiagnosticInfos] {DiagnosticInfo[]} 
 */
function ParsingResult(options)
{
    options = options || {};
    /* istanbul ignore next */
    if (schema_helpers.doDebug) { check_options_correctness_against_schema(this,schema,options); }
    var self = this;
    assert(this instanceof BaseUAObject); //  ' keyword "new" is required for constructor call')
    resolve_schema_field_types(schema);

    BaseUAObject.call(this,options);

    /**
      * Parsing result for the requested NodeTypeDescription
      * @property statusCode
      * @type {StatusCode}
      */
    self.statusCode = initialize_field(schema.fields[0], options.statusCode);

    /**
      * 
      * @property dataStatusCodes
      * @type {StatusCode[]}
      */
    self.dataStatusCodes = initialize_field_array(schema.fields[1], options.dataStatusCodes);

    /**
      * 
      * @property dataDiagnosticInfos
      * @type {DiagnosticInfo[]}
      */
    self.dataDiagnosticInfos = [];
    if (options.dataDiagnosticInfos) {
        assert(_.isArray(options.dataDiagnosticInfos));
        self.dataDiagnosticInfos = options.dataDiagnosticInfos.map(function(e){ return new DiagnosticInfo(e); } );
    }

   // Object.preventExtensions(self);
}
util.inherits(ParsingResult,BaseUAObject);
ParsingResult.prototype.encodingDefaultBinary = makeExpandedNodeId(612,0);
ParsingResult.prototype.encodingDefaultXml = makeExpandedNodeId(611,0);
ParsingResult.prototype._schema = schema;

var encode_StatusCode = _defaultTypeMap.StatusCode.encode;
var decode_StatusCode = _defaultTypeMap.StatusCode.decode;
/**
 * encode the object into a binary stream
 * @method encode
 *
 * @param stream {BinaryStream} 
 */
ParsingResult.prototype.encode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.encode.call(this,stream,options);
    encode_StatusCode(this.statusCode,stream);
    encodeArray(this.dataStatusCodes, stream, encode_StatusCode);
    encodeArray(this.dataDiagnosticInfos,stream,function(obj,stream){ obj.encode(stream,options); }); 
};
/**
 * decode the object from a binary stream
 * @method decode
 *
 * @param stream {BinaryStream} 
 * @param [option] {object} 
 */
ParsingResult.prototype.decode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.decode.call(this,stream,options);
    this.statusCode = decode_StatusCode(stream,options);
    this.dataStatusCodes = decodeArray(stream, decode_StatusCode);
    this.dataDiagnosticInfos = decodeArray(stream, function(stream) { 
       var obj = new DiagnosticInfo();
       obj.decode(stream,options);
       return obj; 
    });
};
ParsingResult.possibleFields = [
  "statusCode",
         "dataStatusCodes",
         "dataDiagnosticInfos"
];


exports.ParsingResult = ParsingResult;
var register_class_definition = require("lib/misc/factories_factories").register_class_definition;
register_class_definition("ParsingResult",ParsingResult);
