// --------- This code has been automatically generated !!! 2018-04-20T14:13:31.174Z
"use strict";
require("requirish")._(module);
/**
 * @module opcua.address_space.types
 */
var assert = require("better-assert");
var util = require("util");
var _  = require("underscore");
var makeNodeId = require("lib/datamodel/nodeid").makeNodeId;
var schema_helpers =  require("lib/misc/factories_schema_helpers");
var extract_all_fields                       = schema_helpers.extract_all_fields;
var resolve_schema_field_types               = schema_helpers.resolve_schema_field_types;
var initialize_field                         = schema_helpers.initialize_field;
var initialize_field_array                   = schema_helpers.initialize_field_array;
var check_options_correctness_against_schema = schema_helpers.check_options_correctness_against_schema;
var _defaultTypeMap = require("lib/misc/factories_builtin_types")._defaultTypeMap;
var ec = require("lib/misc/encode_decode");
var encodeArray = ec.encodeArray;
var decodeArray = ec.decodeArray;
var makeExpandedNodeId = ec.makeExpandedNodeId;
var generate_new_id = require("lib/misc/factories").generate_new_id;
var _enumerations = require("lib/misc/factories_enumerations")._private._enumerations;
var schema = require("../schemas/ActivateSessionRequest_schema").ActivateSessionRequest_Schema;
var RequestHeader = require("./_auto_generated_RequestHeader").RequestHeader;
var SignatureData = require("./_auto_generated_SignatureData").SignatureData;
var SignedSoftwareCertificate = require("./_auto_generated_SignedSoftwareCertificate").SignedSoftwareCertificate;
var BaseUAObject = require("lib/misc/factories_baseobject").BaseUAObject;

/**
 * Activates a session with the server.
 * 
 * @class ActivateSessionRequest
 * @constructor
 * @extends BaseUAObject
 * @param  options {Object}
 * @param  [options.requestHeader] {RequestHeader} A standard header included in all requests sent to a server.
 * @param  [options.clientSignature] {SignatureData} A signature created with the client certificate from the last server nonce returned by the server.
 * @param  [options.clientSoftwareCertificates] {SignedSoftwareCertificate[]} The software certificates owned by the client.
 * @param  [options.localeIds] {LocaleId[]} The locales to use with the session.
 * @param  [options.userIdentityToken] {ExtensionObject} The user identity to use with the session.
 * @param  [options.userTokenSignature] {SignatureData} A digital signature created with the user identity token.
 */
function ActivateSessionRequest(options)
{
    options = options || {};
    /* istanbul ignore next */
    if (schema_helpers.doDebug) { check_options_correctness_against_schema(this,schema,options); }
    var self = this;
    assert(this instanceof BaseUAObject); //  ' keyword "new" is required for constructor call')
    resolve_schema_field_types(schema);

    BaseUAObject.call(this,options);

    /**
      * A standard header included in all requests sent to a server.
      * @property requestHeader
      * @type {RequestHeader}
      */
    self.requestHeader =  new RequestHeader( options.requestHeader);

    /**
      * A signature created with the client certificate from the last server nonce returned by the server.
      * @property clientSignature
      * @type {SignatureData}
      */
    self.clientSignature =  new SignatureData( options.clientSignature);

    /**
      * The software certificates owned by the client.
      * @property clientSoftwareCertificates
      * @type {SignedSoftwareCertificate[]}
      */
    self.clientSoftwareCertificates = [];
    if (options.clientSoftwareCertificates) {
        assert(_.isArray(options.clientSoftwareCertificates));
        self.clientSoftwareCertificates = options.clientSoftwareCertificates.map(function(e){ return new SignedSoftwareCertificate(e); } );
    }

    /**
      * The locales to use with the session.
      * @property localeIds
      * @type {LocaleId[]}
      */
    self.localeIds = initialize_field_array(schema.fields[3], options.localeIds);

    /**
      * The user identity to use with the session.
      * @property userIdentityToken
      * @type {ExtensionObject}
      */
    self.userIdentityToken = initialize_field(schema.fields[4], options.userIdentityToken);

    /**
      * A digital signature created with the user identity token.
      * @property userTokenSignature
      * @type {SignatureData}
      */
    self.userTokenSignature =  new SignatureData( options.userTokenSignature);

   // Object.preventExtensions(self);
}
util.inherits(ActivateSessionRequest,BaseUAObject);
ActivateSessionRequest.prototype.encodingDefaultBinary = makeExpandedNodeId(467,0);
ActivateSessionRequest.prototype.encodingDefaultXml = makeExpandedNodeId(466,0);
ActivateSessionRequest.prototype._schema = schema;

var encode_LocaleId = _defaultTypeMap.LocaleId.encode;
var decode_LocaleId = _defaultTypeMap.LocaleId.decode;
var encode_ExtensionObject = _defaultTypeMap.ExtensionObject.encode;
var decode_ExtensionObject = _defaultTypeMap.ExtensionObject.decode;
/**
 * encode the object into a binary stream
 * @method encode
 *
 * @param stream {BinaryStream} 
 */
ActivateSessionRequest.prototype.encode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.encode.call(this,stream,options);
   this.requestHeader.encode(stream,options);
   this.clientSignature.encode(stream,options);
    encodeArray(this.clientSoftwareCertificates,stream,function(obj,stream){ obj.encode(stream,options); }); 
    encodeArray(this.localeIds, stream, encode_LocaleId);
    encode_ExtensionObject(this.userIdentityToken,stream);
   this.userTokenSignature.encode(stream,options);
};
/**
 * decode the object from a binary stream
 * @method decode
 *
 * @param stream {BinaryStream} 
 * @param [option] {object} 
 */
ActivateSessionRequest.prototype.decode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.decode.call(this,stream,options);
    this.requestHeader.decode(stream,options);
    this.clientSignature.decode(stream,options);
    this.clientSoftwareCertificates = decodeArray(stream, function(stream) { 
       var obj = new SignedSoftwareCertificate();
       obj.decode(stream,options);
       return obj; 
    });
    this.localeIds = decodeArray(stream, decode_LocaleId);
    this.userIdentityToken = decode_ExtensionObject(stream,options);
    this.userTokenSignature.decode(stream,options);
};
ActivateSessionRequest.possibleFields = [
  "requestHeader",
         "clientSignature",
         "clientSoftwareCertificates",
         "localeIds",
         "userIdentityToken",
         "userTokenSignature"
];


exports.ActivateSessionRequest = ActivateSessionRequest;
var register_class_definition = require("lib/misc/factories_factories").register_class_definition;
register_class_definition("ActivateSessionRequest",ActivateSessionRequest);
