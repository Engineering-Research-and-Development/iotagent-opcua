// --------- This code has been automatically generated !!! 2018-04-20T14:13:31.020Z
"use strict";
require("requirish")._(module);
/**
 * @module opcua.address_space.types
 */
var assert = require("better-assert");
var util = require("util");
var _  = require("underscore");
var makeNodeId = require("lib/datamodel/nodeid").makeNodeId;
var schema_helpers =  require("lib/misc/factories_schema_helpers");
var extract_all_fields                       = schema_helpers.extract_all_fields;
var resolve_schema_field_types               = schema_helpers.resolve_schema_field_types;
var initialize_field                         = schema_helpers.initialize_field;
var initialize_field_array                   = schema_helpers.initialize_field_array;
var check_options_correctness_against_schema = schema_helpers.check_options_correctness_against_schema;
var _defaultTypeMap = require("lib/misc/factories_builtin_types")._defaultTypeMap;
var ec = require("lib/misc/encode_decode");
var encodeArray = ec.encodeArray;
var decodeArray = ec.decodeArray;
var makeExpandedNodeId = ec.makeExpandedNodeId;
var generate_new_id = require("lib/misc/factories").generate_new_id;
var _enumerations = require("lib/misc/factories_enumerations")._private._enumerations;
var schema = require("../schemas/DiagnosticInfo_schema").DiagnosticInfo_Schema;
var BaseUAObject = require("lib/misc/factories_baseobject").BaseUAObject;

/**
 * 
 * @class DiagnosticInfo
 * @constructor
 * @extends BaseUAObject
 * @param  options {Object}
 * @param  [options.namespaceUri = -1] {Int32} The symbolicId is defined within the context of a namespace.
 * @param  [options.symbolicId = -1] {Int32} The symbolicId shall be used to identify a vendor-specific error or condition
 * @param  [options.locale = -1] {Int32} The locale part of the vendor-specific localized text describing the symbolic id.
 * @param  [options.localizedText = -1] {Int32} 
 * @param  [options.additionalInfo = null] {String} Vendor-specific diagnostic information.
 * @param  [options.innerStatusCode = 0] {StatusCode} The StatusCode from the inner operation.
 * @param  [options.innerDiagnosticInfo = null] {DiagnosticInfo} The diagnostic info associated with the inner StatusCode.
 */
function DiagnosticInfo(options)
{
    options = options || {};
    /* istanbul ignore next */
    if (schema_helpers.doDebug) { check_options_correctness_against_schema(this,schema,options); }
    var self = this;
    assert(this instanceof BaseUAObject); //  ' keyword "new" is required for constructor call')
    resolve_schema_field_types(schema);

    BaseUAObject.call(this,options);

    /**
      * The symbolicId is defined within the context of a namespace.
      * @property namespaceUri
      * @type {Int32}
      * @default  -1
      */
    self.namespaceUri = initialize_field(schema.fields[0], options.namespaceUri);

    /**
      * The symbolicId shall be used to identify a vendor-specific error or condition
      * @property symbolicId
      * @type {Int32}
      * @default  -1
      */
    self.symbolicId = initialize_field(schema.fields[1], options.symbolicId);

    /**
      * The locale part of the vendor-specific localized text describing the symbolic id.
      * @property locale
      * @type {Int32}
      * @default  -1
      */
    self.locale = initialize_field(schema.fields[2], options.locale);

    /**
      * 
      * @property localizedText
      * @type {Int32}
      * @default  -1
      */
    self.localizedText = initialize_field(schema.fields[3], options.localizedText);

    /**
      * Vendor-specific diagnostic information.
      * @property additionalInfo
      * @type {String}
      * @default  null
      */
    self.additionalInfo = initialize_field(schema.fields[4], options.additionalInfo);

    /**
      * The StatusCode from the inner operation.
      * @property innerStatusCode
      * @type {StatusCode}
      * @default  0
      */
    self.innerStatusCode = initialize_field(schema.fields[5], options.innerStatusCode);

    /**
      * The diagnostic info associated with the inner StatusCode.
      * @property innerDiagnosticInfo
      * @type {DiagnosticInfo}
      * @default  null
      */
    self.innerDiagnosticInfo = (options.innerDiagnosticInfo) ? new DiagnosticInfo( options.innerDiagnosticInfo) : null;

   // Object.preventExtensions(self);
}
util.inherits(DiagnosticInfo,BaseUAObject);
DiagnosticInfo.prototype.encodingDefaultBinary = makeExpandedNodeId(25,0);
DiagnosticInfo.prototype._schema = schema;

var encode_Int32 = _defaultTypeMap.Int32.encode;
var decode_Int32 = _defaultTypeMap.Int32.decode;
var encode_String = _defaultTypeMap.String.encode;
var decode_String = _defaultTypeMap.String.decode;
var encode_StatusCode = _defaultTypeMap.StatusCode.encode;
var decode_StatusCode = _defaultTypeMap.StatusCode.decode;
DiagnosticInfo.prototype.encode = function(stream,options) {
   schema.encode(this,stream,options); 
};
/**
 * decode the object from a binary stream
 * @method decode
 *
 * @param stream {BinaryStream} 
 * @param [option] {object} 
 */
DiagnosticInfo.prototype.decode = function(stream,options) {
   schema.decode(this,stream,options); 
};
DiagnosticInfo.prototype.decode_debug = function(stream,options) {
   schema.decode_debug(this,stream,options); 
};
DiagnosticInfo.possibleFields = [
  "namespaceUri",
         "symbolicId",
         "locale",
         "localizedText",
         "additionalInfo",
         "innerStatusCode",
         "innerDiagnosticInfo"
];


exports.DiagnosticInfo = DiagnosticInfo;
var register_class_definition = require("lib/misc/factories_factories").register_class_definition;
register_class_definition("DiagnosticInfo",DiagnosticInfo);
