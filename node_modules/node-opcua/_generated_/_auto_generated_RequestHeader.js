// --------- This code has been automatically generated !!! 2018-02-01T15:08:08.643Z
"use strict";
require("requirish")._(module);
/**
 * @module opcua.address_space.types
 */
var assert = require("better-assert");
var util = require("util");
var _  = require("underscore");
var makeNodeId = require("lib/datamodel/nodeid").makeNodeId;
var schema_helpers =  require("lib/misc/factories_schema_helpers");
var extract_all_fields                       = schema_helpers.extract_all_fields;
var resolve_schema_field_types               = schema_helpers.resolve_schema_field_types;
var initialize_field                         = schema_helpers.initialize_field;
var initialize_field_array                   = schema_helpers.initialize_field_array;
var check_options_correctness_against_schema = schema_helpers.check_options_correctness_against_schema;
var _defaultTypeMap = require("lib/misc/factories_builtin_types")._defaultTypeMap;
var ec = require("lib/misc/encode_decode");
var encodeArray = ec.encodeArray;
var decodeArray = ec.decodeArray;
var makeExpandedNodeId = ec.makeExpandedNodeId;
var generate_new_id = require("lib/misc/factories").generate_new_id;
var _enumerations = require("lib/misc/factories_enumerations")._private._enumerations;
var schema = require("../schemas/RequestHeader_schema").RequestHeader_Schema;
var BaseUAObject = require("lib/misc/factories_baseobject").BaseUAObject;

/**
 * 
 * @class RequestHeader
 * @constructor
 * @extends BaseUAObject
 * @param  options {Object}
 * @param  [options.authenticationToken] {NodeId} 
 * @param  [options.timeStamp = Thu Feb 01 2018 16:08:08 GMT+0100 (CET)] {UtcTime} 
 * @param  [options.requestHandle = 3735928559] {IntegerId} 
 * @param  [options.returnDiagnostics] {UInt32} 
 * @param  [options.auditEntryId] {UAString} 
 * @param  [options.timeoutHint] {UInt32} 
 * @param  [options.additionalHeader] {ExtensionObject} 
 */
function RequestHeader(options)
{
    options = options || {};
    /* istanbul ignore next */
    if (schema_helpers.doDebug) { check_options_correctness_against_schema(this,schema,options); }
    var self = this;
    assert(this instanceof BaseUAObject); //  ' keyword "new" is required for constructor call')
    resolve_schema_field_types(schema);

    BaseUAObject.call(this,options);

    /**
      * 
      * @property authenticationToken
      * @type {NodeId}
      */
    self.authenticationToken = initialize_field(schema.fields[0], options.authenticationToken);

    /**
      * 
      * @property timeStamp
      * @type {UtcTime}
      * @default  function () {
            return new Date();
        }
      */
    self.timeStamp = initialize_field(schema.fields[1], options.timeStamp);

    /**
      * 
      * @property requestHandle
      * @type {IntegerId}
      * @default  function () {
            return 0xDEADBEEF;
        }
      */
    self.requestHandle = initialize_field(schema.fields[2], options.requestHandle);

    /**
      * 
      * @property returnDiagnostics
      * @type {UInt32}
      */
    self.returnDiagnostics = initialize_field(schema.fields[3], options.returnDiagnostics);

    /**
      * 
      * @property auditEntryId
      * @type {UAString}
      */
    self.auditEntryId = initialize_field(schema.fields[4], options.auditEntryId);

    /**
      * 
      * @property timeoutHint
      * @type {UInt32}
      */
    self.timeoutHint = initialize_field(schema.fields[5], options.timeoutHint);

    /**
      * 
      * @property additionalHeader
      * @type {ExtensionObject}
      */
    self.additionalHeader = initialize_field(schema.fields[6], options.additionalHeader);

   // Object.preventExtensions(self);
}
util.inherits(RequestHeader,BaseUAObject);
RequestHeader.prototype.encodingDefaultBinary = makeExpandedNodeId(391,0);
RequestHeader.prototype.encodingDefaultXml = makeExpandedNodeId(390,0);
RequestHeader.prototype._schema = schema;

var encode_NodeId = _defaultTypeMap.NodeId.encode;
var decode_NodeId = _defaultTypeMap.NodeId.decode;
var encode_UtcTime = _defaultTypeMap.UtcTime.encode;
var decode_UtcTime = _defaultTypeMap.UtcTime.decode;
var encode_IntegerId = _defaultTypeMap.IntegerId.encode;
var decode_IntegerId = _defaultTypeMap.IntegerId.decode;
var encode_UInt32 = _defaultTypeMap.UInt32.encode;
var decode_UInt32 = _defaultTypeMap.UInt32.decode;
var encode_UAString = _defaultTypeMap.UAString.encode;
var decode_UAString = _defaultTypeMap.UAString.decode;
var encode_ExtensionObject = _defaultTypeMap.ExtensionObject.encode;
var decode_ExtensionObject = _defaultTypeMap.ExtensionObject.decode;
/**
 * encode the object into a binary stream
 * @method encode
 *
 * @param stream {BinaryStream} 
 */
RequestHeader.prototype.encode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.encode.call(this,stream,options);
    encode_NodeId(this.authenticationToken,stream);
    encode_UtcTime(this.timeStamp,stream);
    encode_IntegerId(this.requestHandle,stream);
    encode_UInt32(this.returnDiagnostics,stream);
    encode_UAString(this.auditEntryId,stream);
    encode_UInt32(this.timeoutHint,stream);
    encode_ExtensionObject(this.additionalHeader,stream);
};
RequestHeader.prototype.decode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.decode.call(this,stream,options);
    this.authenticationToken = decode_NodeId(stream,options);
    this.timeStamp = decode_UtcTime(stream,options);
    this.requestHandle = decode_IntegerId(stream,options);
    this.returnDiagnostics = decode_UInt32(stream,options);
    this.auditEntryId = decode_UAString(stream,options);
    this.timeoutHint = decode_UInt32(stream,options);
    this.additionalHeader = decode_ExtensionObject(stream,options);
};
RequestHeader.possibleFields = (function() {
    return [
        "authenticationToken",
         "timeStamp",
         "requestHandle",
         "returnDiagnostics",
         "auditEntryId",
         "timeoutHint",
         "additionalHeader"
    ];
})();


exports.RequestHeader = RequestHeader;
var register_class_definition = require("lib/misc/factories_factories").register_class_definition;
register_class_definition("RequestHeader",RequestHeader);
