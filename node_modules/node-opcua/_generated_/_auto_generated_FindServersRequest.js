// --------- This code has been automatically generated !!! 2018-02-01T15:08:09.189Z
"use strict";
require("requirish")._(module);
/**
 * @module opcua.address_space.types
 */
var assert = require("better-assert");
var util = require("util");
var _  = require("underscore");
var makeNodeId = require("lib/datamodel/nodeid").makeNodeId;
var schema_helpers =  require("lib/misc/factories_schema_helpers");
var extract_all_fields                       = schema_helpers.extract_all_fields;
var resolve_schema_field_types               = schema_helpers.resolve_schema_field_types;
var initialize_field                         = schema_helpers.initialize_field;
var initialize_field_array                   = schema_helpers.initialize_field_array;
var check_options_correctness_against_schema = schema_helpers.check_options_correctness_against_schema;
var _defaultTypeMap = require("lib/misc/factories_builtin_types")._defaultTypeMap;
var ec = require("lib/misc/encode_decode");
var encodeArray = ec.encodeArray;
var decodeArray = ec.decodeArray;
var makeExpandedNodeId = ec.makeExpandedNodeId;
var generate_new_id = require("lib/misc/factories").generate_new_id;
var _enumerations = require("lib/misc/factories_enumerations")._private._enumerations;
var schema = require("../schemas/FindServersRequest_schema").FindServersRequest_Schema;
var RequestHeader = require("./_auto_generated_RequestHeader").RequestHeader;
var BaseUAObject = require("lib/misc/factories_baseobject").BaseUAObject;

/**
 * Finds the servers known to the discovery server.
 * 
 * @class FindServersRequest
 * @constructor
 * @extends BaseUAObject
 * @param  options {Object}
 * @param  [options.requestHeader] {RequestHeader} A standard header included in all requests sent to a server.
 * @param  [options.endpointUrl] {String} The URL used by the client to send the request.
 * @param  [options.localeIds] {LocaleId[]} The locales to use when constructing a response.
 * @param  [options.serverUris] {String[]} The URIs of the servers to return (all servers returned if none specified).
 */
function FindServersRequest(options)
{
    options = options || {};
    /* istanbul ignore next */
    if (schema_helpers.doDebug) { check_options_correctness_against_schema(this,schema,options); }
    var self = this;
    assert(this instanceof BaseUAObject); //  ' keyword "new" is required for constructor call')
    resolve_schema_field_types(schema);

    BaseUAObject.call(this,options);

    /**
      * A standard header included in all requests sent to a server.
      * @property requestHeader
      * @type {RequestHeader}
      */
    self.requestHeader =  new RequestHeader( options.requestHeader);

    /**
      * The URL used by the client to send the request.
      * @property endpointUrl
      * @type {String}
      */
    self.endpointUrl = initialize_field(schema.fields[1], options.endpointUrl);

    /**
      * The locales to use when constructing a response.
      * @property localeIds
      * @type {LocaleId[]}
      */
    self.localeIds = initialize_field_array(schema.fields[2], options.localeIds);

    /**
      * The URIs of the servers to return (all servers returned if none specified).
      * @property serverUris
      * @type {String[]}
      */
    self.serverUris = initialize_field_array(schema.fields[3], options.serverUris);

   // Object.preventExtensions(self);
}
util.inherits(FindServersRequest,BaseUAObject);
FindServersRequest.prototype.encodingDefaultBinary = makeExpandedNodeId(422,0);
FindServersRequest.prototype.encodingDefaultXml = makeExpandedNodeId(421,0);
FindServersRequest.prototype._schema = schema;

var encode_String = _defaultTypeMap.String.encode;
var decode_String = _defaultTypeMap.String.decode;
var encode_LocaleId = _defaultTypeMap.LocaleId.encode;
var decode_LocaleId = _defaultTypeMap.LocaleId.decode;
/**
 * encode the object into a binary stream
 * @method encode
 *
 * @param stream {BinaryStream} 
 */
FindServersRequest.prototype.encode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.encode.call(this,stream,options);
   this.requestHeader.encode(stream,options);
    encode_String(this.endpointUrl,stream);
    encodeArray(this.localeIds, stream, encode_LocaleId);
    encodeArray(this.serverUris, stream, encode_String);
};
FindServersRequest.prototype.decode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.decode.call(this,stream,options);
    this.requestHeader.decode(stream,options);
    this.endpointUrl = decode_String(stream,options);
    this.localeIds = decodeArray(stream, decode_LocaleId);
    this.serverUris = decodeArray(stream, decode_String);
};
FindServersRequest.possibleFields = (function() {
    return [
        "requestHeader",
         "endpointUrl",
         "localeIds",
         "serverUris"
    ];
})();


exports.FindServersRequest = FindServersRequest;
var register_class_definition = require("lib/misc/factories_factories").register_class_definition;
register_class_definition("FindServersRequest",FindServersRequest);
