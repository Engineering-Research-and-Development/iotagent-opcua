// --------- This code has been automatically generated !!! 2018-04-20T14:13:31.269Z
"use strict";
require("requirish")._(module);
/**
 * @module opcua.address_space.types
 */
var assert = require("better-assert");
var util = require("util");
var _  = require("underscore");
var makeNodeId = require("lib/datamodel/nodeid").makeNodeId;
var schema_helpers =  require("lib/misc/factories_schema_helpers");
var extract_all_fields                       = schema_helpers.extract_all_fields;
var resolve_schema_field_types               = schema_helpers.resolve_schema_field_types;
var initialize_field                         = schema_helpers.initialize_field;
var initialize_field_array                   = schema_helpers.initialize_field_array;
var check_options_correctness_against_schema = schema_helpers.check_options_correctness_against_schema;
var _defaultTypeMap = require("lib/misc/factories_builtin_types")._defaultTypeMap;
var ec = require("lib/misc/encode_decode");
var encodeArray = ec.encodeArray;
var decodeArray = ec.decodeArray;
var makeExpandedNodeId = ec.makeExpandedNodeId;
var generate_new_id = require("lib/misc/factories").generate_new_id;
var _enumerations = require("lib/misc/factories_enumerations")._private._enumerations;
var schema = require("../schemas/PublishResponse_schema").PublishResponse_Schema;
var ResponseHeader = require("./_auto_generated_ResponseHeader").ResponseHeader;
var NotificationMessage = require("./_auto_generated_NotificationMessage").NotificationMessage;
var DiagnosticInfo = require("./_auto_generated_DiagnosticInfo").DiagnosticInfo;
var BaseUAObject = require("lib/misc/factories_baseobject").BaseUAObject;

/**
 * 
 * @class PublishResponse
 * @constructor
 * @extends BaseUAObject
 * @param  options {Object}
 * @param  [options.responseHeader] {ResponseHeader} 
 * @param  [options.subscriptionId] {IntegerId} 
 * @param  [options.availableSequenceNumbers] {Counter[]}  a list of sequence number available in the subscription for retransmission and not acknowledged by the client
 * @param  [options.moreNotifications] {Boolean} indicates if the server was not able to send all available notification in this publish response
 * @param  [options.notificationMessage] {NotificationMessage} 
 * @param  [options.results] {StatusCode[]} 
 * @param  [options.diagnosticInfos] {DiagnosticInfo[]} 
 */
function PublishResponse(options)
{
    options = options || {};
    /* istanbul ignore next */
    if (schema_helpers.doDebug) { check_options_correctness_against_schema(this,schema,options); }
    var self = this;
    assert(this instanceof BaseUAObject); //  ' keyword "new" is required for constructor call')
    resolve_schema_field_types(schema);

    BaseUAObject.call(this,options);

    /**
      * 
      * @property responseHeader
      * @type {ResponseHeader}
      */
    self.responseHeader =  new ResponseHeader( options.responseHeader);

    /**
      * 
      * @property subscriptionId
      * @type {IntegerId}
      */
    self.subscriptionId = initialize_field(schema.fields[1], options.subscriptionId);

    /**
      *  a list of sequence number available in the subscription for retransmission and not acknowledged by the client
      * @property availableSequenceNumbers
      * @type {Counter[]}
      */
    self.availableSequenceNumbers = initialize_field_array(schema.fields[2], options.availableSequenceNumbers);

    /**
      * indicates if the server was not able to send all available notification in this publish response
      * @property moreNotifications
      * @type {Boolean}
      */
    self.moreNotifications = initialize_field(schema.fields[3], options.moreNotifications);

    /**
      * 
      * @property notificationMessage
      * @type {NotificationMessage}
      */
    self.notificationMessage =  new NotificationMessage( options.notificationMessage);

    /**
      * 
      * @property results
      * @type {StatusCode[]}
      */
    self.results = initialize_field_array(schema.fields[5], options.results);

    /**
      * 
      * @property diagnosticInfos
      * @type {DiagnosticInfo[]}
      */
    self.diagnosticInfos = [];
    if (options.diagnosticInfos) {
        assert(_.isArray(options.diagnosticInfos));
        self.diagnosticInfos = options.diagnosticInfos.map(function(e){ return new DiagnosticInfo(e); } );
    }

   // Object.preventExtensions(self);
}
util.inherits(PublishResponse,BaseUAObject);
PublishResponse.prototype.encodingDefaultBinary = makeExpandedNodeId(829,0);
PublishResponse.prototype.encodingDefaultXml = makeExpandedNodeId(828,0);
PublishResponse.prototype._schema = schema;

var encode_IntegerId = _defaultTypeMap.IntegerId.encode;
var decode_IntegerId = _defaultTypeMap.IntegerId.decode;
var encode_Counter = _defaultTypeMap.Counter.encode;
var decode_Counter = _defaultTypeMap.Counter.decode;
var encode_Boolean = _defaultTypeMap.Boolean.encode;
var decode_Boolean = _defaultTypeMap.Boolean.decode;
var encode_StatusCode = _defaultTypeMap.StatusCode.encode;
var decode_StatusCode = _defaultTypeMap.StatusCode.decode;
/**
 * encode the object into a binary stream
 * @method encode
 *
 * @param stream {BinaryStream} 
 */
PublishResponse.prototype.encode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.encode.call(this,stream,options);
   this.responseHeader.encode(stream,options);
    encode_IntegerId(this.subscriptionId,stream);
    encodeArray(this.availableSequenceNumbers, stream, encode_Counter);
    encode_Boolean(this.moreNotifications,stream);
   this.notificationMessage.encode(stream,options);
    encodeArray(this.results, stream, encode_StatusCode);
    encodeArray(this.diagnosticInfos,stream,function(obj,stream){ obj.encode(stream,options); }); 
};
/**
 * decode the object from a binary stream
 * @method decode
 *
 * @param stream {BinaryStream} 
 * @param [option] {object} 
 */
PublishResponse.prototype.decode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.decode.call(this,stream,options);
    this.responseHeader.decode(stream,options);
    this.subscriptionId = decode_IntegerId(stream,options);
    this.availableSequenceNumbers = decodeArray(stream, decode_Counter);
    this.moreNotifications = decode_Boolean(stream,options);
    this.notificationMessage.decode(stream,options);
    this.results = decodeArray(stream, decode_StatusCode);
    this.diagnosticInfos = decodeArray(stream, function(stream) { 
       var obj = new DiagnosticInfo();
       obj.decode(stream,options);
       return obj; 
    });
};
PublishResponse.possibleFields = [
  "responseHeader",
         "subscriptionId",
         "availableSequenceNumbers",
         "moreNotifications",
         "notificationMessage",
         "results",
         "diagnosticInfos"
];


exports.PublishResponse = PublishResponse;
var register_class_definition = require("lib/misc/factories_factories").register_class_definition;
register_class_definition("PublishResponse",PublishResponse);
