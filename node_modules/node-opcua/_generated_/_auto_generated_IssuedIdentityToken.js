// --------- This code has been automatically generated !!! 2018-04-20T14:13:31.207Z
"use strict";
require("requirish")._(module);
/**
 * @module opcua.address_space.types
 */
var assert = require("better-assert");
var util = require("util");
var _  = require("underscore");
var makeNodeId = require("lib/datamodel/nodeid").makeNodeId;
var schema_helpers =  require("lib/misc/factories_schema_helpers");
var extract_all_fields                       = schema_helpers.extract_all_fields;
var resolve_schema_field_types               = schema_helpers.resolve_schema_field_types;
var initialize_field                         = schema_helpers.initialize_field;
var initialize_field_array                   = schema_helpers.initialize_field_array;
var check_options_correctness_against_schema = schema_helpers.check_options_correctness_against_schema;
var _defaultTypeMap = require("lib/misc/factories_builtin_types")._defaultTypeMap;
var ec = require("lib/misc/encode_decode");
var encodeArray = ec.encodeArray;
var decodeArray = ec.decodeArray;
var makeExpandedNodeId = ec.makeExpandedNodeId;
var generate_new_id = require("lib/misc/factories").generate_new_id;
var _enumerations = require("lib/misc/factories_enumerations")._private._enumerations;
var schema = require("../schemas/IssuedIdentityToken_schema").IssuedIdentityToken_Schema;
var BaseUAObject = require("lib/misc/factories_baseobject").BaseUAObject;

/**
 * A token representing a user identified by a WS-Security XML token.
 * 
 * @class IssuedIdentityToken
 * @constructor
 * @extends BaseUAObject
 * @param  options {Object}
 * @param  [options.policyId] {String} The policy id specified in a user token policy for the endpoint being used.
 * @param  [options.tokenData] {ByteString} The XML token encrypted with the server certificate.
 * @param  [options.encryptionAlgorithm] {String} The algorithm used to encrypt the password.
 */
function IssuedIdentityToken(options)
{
    options = options || {};
    /* istanbul ignore next */
    if (schema_helpers.doDebug) { check_options_correctness_against_schema(this,schema,options); }
    var self = this;
    assert(this instanceof BaseUAObject); //  ' keyword "new" is required for constructor call')
    resolve_schema_field_types(schema);

    BaseUAObject.call(this,options);

    /**
      * The policy id specified in a user token policy for the endpoint being used.
      * @property policyId
      * @type {String}
      */
    self.policyId = initialize_field(schema.fields[0], options.policyId);

    /**
      * The XML token encrypted with the server certificate.
      * @property tokenData
      * @type {ByteString}
      */
    self.tokenData = initialize_field(schema.fields[1], options.tokenData);

    /**
      * The algorithm used to encrypt the password.
      * @property encryptionAlgorithm
      * @type {String}
      */
    self.encryptionAlgorithm = initialize_field(schema.fields[2], options.encryptionAlgorithm);

   // Object.preventExtensions(self);
}
util.inherits(IssuedIdentityToken,BaseUAObject);
IssuedIdentityToken.prototype.encodingDefaultBinary = makeExpandedNodeId(940,0);
IssuedIdentityToken.prototype.encodingDefaultXml = makeExpandedNodeId(939,0);
IssuedIdentityToken.prototype._schema = schema;

var encode_String = _defaultTypeMap.String.encode;
var decode_String = _defaultTypeMap.String.decode;
var encode_ByteString = _defaultTypeMap.ByteString.encode;
var decode_ByteString = _defaultTypeMap.ByteString.decode;
/**
 * encode the object into a binary stream
 * @method encode
 *
 * @param stream {BinaryStream} 
 */
IssuedIdentityToken.prototype.encode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.encode.call(this,stream,options);
    encode_String(this.policyId,stream);
    encode_ByteString(this.tokenData,stream);
    encode_String(this.encryptionAlgorithm,stream);
};
/**
 * decode the object from a binary stream
 * @method decode
 *
 * @param stream {BinaryStream} 
 * @param [option] {object} 
 */
IssuedIdentityToken.prototype.decode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.decode.call(this,stream,options);
    this.policyId = decode_String(stream,options);
    this.tokenData = decode_ByteString(stream,options);
    this.encryptionAlgorithm = decode_String(stream,options);
};
IssuedIdentityToken.possibleFields = [
  "policyId",
         "tokenData",
         "encryptionAlgorithm"
];


exports.IssuedIdentityToken = IssuedIdentityToken;
var register_class_definition = require("lib/misc/factories_factories").register_class_definition;
register_class_definition("IssuedIdentityToken",IssuedIdentityToken);
