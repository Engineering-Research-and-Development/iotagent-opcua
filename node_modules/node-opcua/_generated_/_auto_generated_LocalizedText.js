// --------- This code has been automatically generated !!! 2018-02-01T15:08:08.627Z
"use strict";
require("requirish")._(module);
/**
 * @module opcua.address_space.types
 */
var assert = require("better-assert");
var util = require("util");
var _  = require("underscore");
var makeNodeId = require("lib/datamodel/nodeid").makeNodeId;
var schema_helpers =  require("lib/misc/factories_schema_helpers");
var extract_all_fields                       = schema_helpers.extract_all_fields;
var resolve_schema_field_types               = schema_helpers.resolve_schema_field_types;
var initialize_field                         = schema_helpers.initialize_field;
var initialize_field_array                   = schema_helpers.initialize_field_array;
var check_options_correctness_against_schema = schema_helpers.check_options_correctness_against_schema;
var _defaultTypeMap = require("lib/misc/factories_builtin_types")._defaultTypeMap;
var ec = require("lib/misc/encode_decode");
var encodeArray = ec.encodeArray;
var decodeArray = ec.decodeArray;
var makeExpandedNodeId = ec.makeExpandedNodeId;
var generate_new_id = require("lib/misc/factories").generate_new_id;
var _enumerations = require("lib/misc/factories_enumerations")._private._enumerations;
var schema = require("../schemas/LocalizedText_schema").LocalizedText_Schema;
var BaseUAObject = require("lib/misc/factories_baseobject").BaseUAObject;

/**
 * 
 * @class LocalizedText
 * @constructor
 * @extends BaseUAObject
 * @param  options {Object}
 * @param  [options.text = null] {String} 
 * @param  [options.locale] {LocaleId} 
 */
function LocalizedText(options)
{
    options = options || {};
    /* istanbul ignore next */
    if (schema_helpers.doDebug) { check_options_correctness_against_schema(this,schema,options); }
    var self = this;
    assert(this instanceof BaseUAObject); //  ' keyword "new" is required for constructor call')
    resolve_schema_field_types(schema);

    BaseUAObject.call(this,options);

    /**
      * 
      * @property text
      * @type {String}
      * @default  function () { return null; }
      */
    self.text = initialize_field(schema.fields[0], options.text);

    /**
      * 
      * @property locale
      * @type {LocaleId}
      */
    self.locale = initialize_field(schema.fields[1], options.locale);

   // Object.preventExtensions(self);
}
util.inherits(LocalizedText,BaseUAObject);
schema.id = generate_new_id();
LocalizedText.prototype.encodingDefaultBinary = makeExpandedNodeId(schema.id);
LocalizedText.prototype._schema = schema;

var encode_String = _defaultTypeMap.String.encode;
var decode_String = _defaultTypeMap.String.decode;
var encode_LocaleId = _defaultTypeMap.LocaleId.encode;
var decode_LocaleId = _defaultTypeMap.LocaleId.decode;
LocalizedText.prototype.encode = function(stream,options) {
   schema.encode(this,stream,options); 
};
/**
 * decode the object from a binary stream
 * @method decode
 *
 * @param stream {BinaryStream} 
 * @param [option] {object} 
 */
LocalizedText.prototype.decode = function(stream,options) {
   schema.decode(this,stream,options); 
};
LocalizedText.prototype.decode_debug = function(stream,options) {
   schema.decode_debug(this,stream,options); 
};
LocalizedText.possibleFields = (function() {
    return [
        "text",
         "locale"
    ];
})();


exports.LocalizedText = LocalizedText;
var register_class_definition = require("lib/misc/factories_factories").register_class_definition;
register_class_definition("LocalizedText",LocalizedText);
