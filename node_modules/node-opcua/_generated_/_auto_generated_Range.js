// --------- This code has been automatically generated !!! 2018-04-20T14:13:31.217Z
"use strict";
require("requirish")._(module);
/**
 * @module opcua.address_space.types
 */
var assert = require("better-assert");
var util = require("util");
var _  = require("underscore");
var makeNodeId = require("lib/datamodel/nodeid").makeNodeId;
var schema_helpers =  require("lib/misc/factories_schema_helpers");
var extract_all_fields                       = schema_helpers.extract_all_fields;
var resolve_schema_field_types               = schema_helpers.resolve_schema_field_types;
var initialize_field                         = schema_helpers.initialize_field;
var initialize_field_array                   = schema_helpers.initialize_field_array;
var check_options_correctness_against_schema = schema_helpers.check_options_correctness_against_schema;
var _defaultTypeMap = require("lib/misc/factories_builtin_types")._defaultTypeMap;
var ec = require("lib/misc/encode_decode");
var encodeArray = ec.encodeArray;
var decodeArray = ec.decodeArray;
var makeExpandedNodeId = ec.makeExpandedNodeId;
var generate_new_id = require("lib/misc/factories").generate_new_id;
var _enumerations = require("lib/misc/factories_enumerations")._private._enumerations;
var schema = require("../lib/data_access/schemas/Range_schema").Range_Schema;
var BaseUAObject = require("lib/misc/factories_baseobject").BaseUAObject;

/**
 * 
 * @class Range
 * @constructor
 * @extends BaseUAObject
 * @param  options {Object}
 * @param  [options.low] {Double} Lowest value in the range.
 * @param  [options.high] {Double} Highest value in the range.
 */
function Range(options)
{
    options = options || {};
    /* istanbul ignore next */
    if (schema_helpers.doDebug) { check_options_correctness_against_schema(this,schema,options); }
    var self = this;
    assert(this instanceof BaseUAObject); //  ' keyword "new" is required for constructor call')
    resolve_schema_field_types(schema);

    BaseUAObject.call(this,options);

    /**
      * Lowest value in the range.
      * @property low
      * @type {Double}
      */
    self.low = initialize_field(schema.fields[0], options.low);

    /**
      * Highest value in the range.
      * @property high
      * @type {Double}
      */
    self.high = initialize_field(schema.fields[1], options.high);

   // Object.preventExtensions(self);
}
util.inherits(Range,BaseUAObject);
Range.prototype.encodingDefaultBinary = makeExpandedNodeId(886,0);
Range.prototype.encodingDefaultXml = makeExpandedNodeId(885,0);
Range.prototype._schema = schema;

var encode_Double = _defaultTypeMap.Double.encode;
var decode_Double = _defaultTypeMap.Double.decode;
/**
 * encode the object into a binary stream
 * @method encode
 *
 * @param stream {BinaryStream} 
 */
Range.prototype.encode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.encode.call(this,stream,options);
    encode_Double(this.low,stream);
    encode_Double(this.high,stream);
};
/**
 * decode the object from a binary stream
 * @method decode
 *
 * @param stream {BinaryStream} 
 * @param [option] {object} 
 */
Range.prototype.decode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.decode.call(this,stream,options);
    this.low = decode_Double(stream,options);
    this.high = decode_Double(stream,options);
};
Range.possibleFields = [
  "low",
         "high"
];


exports.Range = Range;
var register_class_definition = require("lib/misc/factories_factories").register_class_definition;
register_class_definition("Range",Range);
