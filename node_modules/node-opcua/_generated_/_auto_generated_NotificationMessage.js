// --------- This code has been automatically generated !!! 2018-04-20T14:13:31.267Z
"use strict";
require("requirish")._(module);
/**
 * @module opcua.address_space.types
 */
var assert = require("better-assert");
var util = require("util");
var _  = require("underscore");
var makeNodeId = require("lib/datamodel/nodeid").makeNodeId;
var schema_helpers =  require("lib/misc/factories_schema_helpers");
var extract_all_fields                       = schema_helpers.extract_all_fields;
var resolve_schema_field_types               = schema_helpers.resolve_schema_field_types;
var initialize_field                         = schema_helpers.initialize_field;
var initialize_field_array                   = schema_helpers.initialize_field_array;
var check_options_correctness_against_schema = schema_helpers.check_options_correctness_against_schema;
var _defaultTypeMap = require("lib/misc/factories_builtin_types")._defaultTypeMap;
var ec = require("lib/misc/encode_decode");
var encodeArray = ec.encodeArray;
var decodeArray = ec.decodeArray;
var makeExpandedNodeId = ec.makeExpandedNodeId;
var generate_new_id = require("lib/misc/factories").generate_new_id;
var _enumerations = require("lib/misc/factories_enumerations")._private._enumerations;
var schema = require("../schemas/NotificationMessage_schema").NotificationMessage_Schema;
var BaseUAObject = require("lib/misc/factories_baseobject").BaseUAObject;

/**
 * 
 * @class NotificationMessage
 * @constructor
 * @extends BaseUAObject
 * @param  options {Object}
 * @param  [options.sequenceNumber] {Counter} 
 * @param  [options.publishTime] {UtcTime} 
 * @param  [options.notificationData] {ExtensionObject[]} 
 */
function NotificationMessage(options)
{
    options = options || {};
    /* istanbul ignore next */
    if (schema_helpers.doDebug) { check_options_correctness_against_schema(this,schema,options); }
    var self = this;
    assert(this instanceof BaseUAObject); //  ' keyword "new" is required for constructor call')
    resolve_schema_field_types(schema);

    BaseUAObject.call(this,options);

    /**
      * 
      * @property sequenceNumber
      * @type {Counter}
      */
    self.sequenceNumber = initialize_field(schema.fields[0], options.sequenceNumber);

    /**
      * 
      * @property publishTime
      * @type {UtcTime}
      */
    self.publishTime = initialize_field(schema.fields[1], options.publishTime);

    /**
      * 
      * @property notificationData
      * @type {ExtensionObject[]}
      */
    self.notificationData = initialize_field_array(schema.fields[2], options.notificationData);

   // Object.preventExtensions(self);
}
util.inherits(NotificationMessage,BaseUAObject);
NotificationMessage.prototype.encodingDefaultBinary = makeExpandedNodeId(805,0);
NotificationMessage.prototype.encodingDefaultXml = makeExpandedNodeId(804,0);
NotificationMessage.prototype._schema = schema;

var encode_Counter = _defaultTypeMap.Counter.encode;
var decode_Counter = _defaultTypeMap.Counter.decode;
var encode_UtcTime = _defaultTypeMap.UtcTime.encode;
var decode_UtcTime = _defaultTypeMap.UtcTime.decode;
var encode_ExtensionObject = _defaultTypeMap.ExtensionObject.encode;
var decode_ExtensionObject = _defaultTypeMap.ExtensionObject.decode;
/**
 * encode the object into a binary stream
 * @method encode
 *
 * @param stream {BinaryStream} 
 */
NotificationMessage.prototype.encode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.encode.call(this,stream,options);
    encode_Counter(this.sequenceNumber,stream);
    encode_UtcTime(this.publishTime,stream);
    encodeArray(this.notificationData, stream, encode_ExtensionObject);
};
/**
 * decode the object from a binary stream
 * @method decode
 *
 * @param stream {BinaryStream} 
 * @param [option] {object} 
 */
NotificationMessage.prototype.decode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.decode.call(this,stream,options);
    this.sequenceNumber = decode_Counter(stream,options);
    this.publishTime = decode_UtcTime(stream,options);
    this.notificationData = decodeArray(stream, decode_ExtensionObject);
};
NotificationMessage.possibleFields = [
  "sequenceNumber",
         "publishTime",
         "notificationData"
];


exports.NotificationMessage = NotificationMessage;
var register_class_definition = require("lib/misc/factories_factories").register_class_definition;
register_class_definition("NotificationMessage",NotificationMessage);
