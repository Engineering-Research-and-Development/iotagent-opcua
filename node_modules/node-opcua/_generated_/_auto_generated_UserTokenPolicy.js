// --------- This code has been automatically generated !!! 2018-04-20T14:13:31.108Z
"use strict";
require("requirish")._(module);
/**
 * @module opcua.address_space.types
 */
var assert = require("better-assert");
var util = require("util");
var _  = require("underscore");
var makeNodeId = require("lib/datamodel/nodeid").makeNodeId;
var schema_helpers =  require("lib/misc/factories_schema_helpers");
var extract_all_fields                       = schema_helpers.extract_all_fields;
var resolve_schema_field_types               = schema_helpers.resolve_schema_field_types;
var initialize_field                         = schema_helpers.initialize_field;
var initialize_field_array                   = schema_helpers.initialize_field_array;
var check_options_correctness_against_schema = schema_helpers.check_options_correctness_against_schema;
var _defaultTypeMap = require("lib/misc/factories_builtin_types")._defaultTypeMap;
var ec = require("lib/misc/encode_decode");
var encodeArray = ec.encodeArray;
var decodeArray = ec.decodeArray;
var makeExpandedNodeId = ec.makeExpandedNodeId;
var generate_new_id = require("lib/misc/factories").generate_new_id;
var _enumerations = require("lib/misc/factories_enumerations")._private._enumerations;
var schema = require("../schemas/UserTokenPolicy_schema").UserTokenPolicy_Schema;
var BaseUAObject = require("lib/misc/factories_baseobject").BaseUAObject;

/**
 * 
 * @class UserTokenPolicy
 * @constructor
 * @extends BaseUAObject
 * @param  options {Object}
 * @param  [options.policyId] {String} 
 * @param  [options.tokenType] {EnumUserIdentityTokenType} 
 * @param  [options.issuedTokenType = null] {String} 
 * @param  [options.issuerEndpointUrl = null] {String} 
 * @param  [options.securityPolicyUri = null] {String} 
 */
function UserTokenPolicy(options)
{
    options = options || {};
    /* istanbul ignore next */
    if (schema_helpers.doDebug) { check_options_correctness_against_schema(this,schema,options); }
    var self = this;
    assert(this instanceof BaseUAObject); //  ' keyword "new" is required for constructor call')
    resolve_schema_field_types(schema);

    BaseUAObject.call(this,options);

    /**
      * 
      * @property policyId
      * @type {String}
      */
    self.policyId = initialize_field(schema.fields[0], options.policyId);

    /**
      * 
      * @property tokenType
      * @type {EnumUserIdentityTokenType}
      */
    self.setTokenType(initialize_field(schema.fields[1], options.tokenType));

    /**
      * 
      * @property issuedTokenType
      * @type {String}
      * @default  null
      */
    self.issuedTokenType = initialize_field(schema.fields[2], options.issuedTokenType);

    /**
      * 
      * @property issuerEndpointUrl
      * @type {String}
      * @default  null
      */
    self.issuerEndpointUrl = initialize_field(schema.fields[3], options.issuerEndpointUrl);

    /**
      * 
      * @property securityPolicyUri
      * @type {String}
      * @default  null
      */
    self.securityPolicyUri = initialize_field(schema.fields[4], options.securityPolicyUri);

   // Object.preventExtensions(self);
}
util.inherits(UserTokenPolicy,BaseUAObject);

//## Define Enumeration setters
UserTokenPolicy.prototype.setTokenType = function(value) {
   var coercedValue = _enumerations.EnumUserIdentityTokenType.typedEnum.get(value);
   /* istanbul ignore next */
   if (coercedValue === undefined || coercedValue === null) {
      throw new Error("value cannot be coerced to EnumUserIdentityTokenType: " + value);
   }
   this.tokenType = coercedValue;
};
UserTokenPolicy.prototype.encodingDefaultBinary = makeExpandedNodeId(306,0);
UserTokenPolicy.prototype.encodingDefaultXml = makeExpandedNodeId(305,0);
UserTokenPolicy.prototype._schema = schema;

var encode_String = _defaultTypeMap.String.encode;
var decode_String = _defaultTypeMap.String.decode;
var encode_EnumUserIdentityTokenType = _enumerations.EnumUserIdentityTokenType.encode;
var decode_EnumUserIdentityTokenType = _enumerations.EnumUserIdentityTokenType.decode;
/**
 * encode the object into a binary stream
 * @method encode
 *
 * @param stream {BinaryStream} 
 */
UserTokenPolicy.prototype.encode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.encode.call(this,stream,options);
    encode_String(this.policyId,stream);
    encode_EnumUserIdentityTokenType(this.tokenType,stream);
    encode_String(this.issuedTokenType,stream);
    encode_String(this.issuerEndpointUrl,stream);
    encode_String(this.securityPolicyUri,stream);
};
/**
 * decode the object from a binary stream
 * @method decode
 *
 * @param stream {BinaryStream} 
 * @param [option] {object} 
 */
UserTokenPolicy.prototype.decode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.decode.call(this,stream,options);
    this.policyId = decode_String(stream,options);
    this.tokenType = decode_EnumUserIdentityTokenType(stream,options);
    this.issuedTokenType = decode_String(stream,options);
    this.issuerEndpointUrl = decode_String(stream,options);
    this.securityPolicyUri = decode_String(stream,options);
};
UserTokenPolicy.possibleFields = [
  "policyId",
         "tokenType",
         "issuedTokenType",
         "issuerEndpointUrl",
         "securityPolicyUri"
];


exports.UserTokenPolicy = UserTokenPolicy;
var register_class_definition = require("lib/misc/factories_factories").register_class_definition;
register_class_definition("UserTokenPolicy",UserTokenPolicy);
