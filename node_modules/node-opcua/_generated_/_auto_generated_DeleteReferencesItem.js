// --------- This code has been automatically generated !!! 2018-02-01T15:08:09.248Z
"use strict";
require("requirish")._(module);
/**
 * @module opcua.address_space.types
 */
var assert = require("better-assert");
var util = require("util");
var _  = require("underscore");
var makeNodeId = require("lib/datamodel/nodeid").makeNodeId;
var schema_helpers =  require("lib/misc/factories_schema_helpers");
var extract_all_fields                       = schema_helpers.extract_all_fields;
var resolve_schema_field_types               = schema_helpers.resolve_schema_field_types;
var initialize_field                         = schema_helpers.initialize_field;
var initialize_field_array                   = schema_helpers.initialize_field_array;
var check_options_correctness_against_schema = schema_helpers.check_options_correctness_against_schema;
var _defaultTypeMap = require("lib/misc/factories_builtin_types")._defaultTypeMap;
var ec = require("lib/misc/encode_decode");
var encodeArray = ec.encodeArray;
var decodeArray = ec.decodeArray;
var makeExpandedNodeId = ec.makeExpandedNodeId;
var generate_new_id = require("lib/misc/factories").generate_new_id;
var _enumerations = require("lib/misc/factories_enumerations")._private._enumerations;
var schema = require("../schemas/DeleteReferencesItem_schema").DeleteReferencesItem_Schema;
var BaseUAObject = require("lib/misc/factories_baseobject").BaseUAObject;

/**
 * 
 * @class DeleteReferencesItem
 * @constructor
 * @extends BaseUAObject
 * @param  options {Object}
 * @param  [options.sourceNodeId] {NodeId} 
 * @param  [options.referenceNodeId] {NodeId} 
 * @param  [options.isForward] {Boolean} 
 * @param  [options.targetNodeId] {ExpandedNodeId} 
 * @param  [options.deleteBidirectional] {Boolean} 
 */
function DeleteReferencesItem(options)
{
    options = options || {};
    /* istanbul ignore next */
    if (schema_helpers.doDebug) { check_options_correctness_against_schema(this,schema,options); }
    var self = this;
    assert(this instanceof BaseUAObject); //  ' keyword "new" is required for constructor call')
    resolve_schema_field_types(schema);

    BaseUAObject.call(this,options);

    /**
      * 
      * @property sourceNodeId
      * @type {NodeId}
      */
    self.sourceNodeId = initialize_field(schema.fields[0], options.sourceNodeId);

    /**
      * 
      * @property referenceNodeId
      * @type {NodeId}
      */
    self.referenceNodeId = initialize_field(schema.fields[1], options.referenceNodeId);

    /**
      * 
      * @property isForward
      * @type {Boolean}
      */
    self.isForward = initialize_field(schema.fields[2], options.isForward);

    /**
      * 
      * @property targetNodeId
      * @type {ExpandedNodeId}
      */
    self.targetNodeId = initialize_field(schema.fields[3], options.targetNodeId);

    /**
      * 
      * @property deleteBidirectional
      * @type {Boolean}
      */
    self.deleteBidirectional = initialize_field(schema.fields[4], options.deleteBidirectional);

   // Object.preventExtensions(self);
}
util.inherits(DeleteReferencesItem,BaseUAObject);
DeleteReferencesItem.prototype.encodingDefaultBinary = makeExpandedNodeId(387,0);
DeleteReferencesItem.prototype.encodingDefaultXml = makeExpandedNodeId(386,0);
DeleteReferencesItem.prototype._schema = schema;

var encode_NodeId = _defaultTypeMap.NodeId.encode;
var decode_NodeId = _defaultTypeMap.NodeId.decode;
var encode_Boolean = _defaultTypeMap.Boolean.encode;
var decode_Boolean = _defaultTypeMap.Boolean.decode;
var encode_ExpandedNodeId = _defaultTypeMap.ExpandedNodeId.encode;
var decode_ExpandedNodeId = _defaultTypeMap.ExpandedNodeId.decode;
/**
 * encode the object into a binary stream
 * @method encode
 *
 * @param stream {BinaryStream} 
 */
DeleteReferencesItem.prototype.encode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.encode.call(this,stream,options);
    encode_NodeId(this.sourceNodeId,stream);
    encode_NodeId(this.referenceNodeId,stream);
    encode_Boolean(this.isForward,stream);
    encode_ExpandedNodeId(this.targetNodeId,stream);
    encode_Boolean(this.deleteBidirectional,stream);
};
DeleteReferencesItem.prototype.decode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.decode.call(this,stream,options);
    this.sourceNodeId = decode_NodeId(stream,options);
    this.referenceNodeId = decode_NodeId(stream,options);
    this.isForward = decode_Boolean(stream,options);
    this.targetNodeId = decode_ExpandedNodeId(stream,options);
    this.deleteBidirectional = decode_Boolean(stream,options);
};
DeleteReferencesItem.possibleFields = (function() {
    return [
        "sourceNodeId",
         "referenceNodeId",
         "isForward",
         "targetNodeId",
         "deleteBidirectional"
    ];
})();


exports.DeleteReferencesItem = DeleteReferencesItem;
var register_class_definition = require("lib/misc/factories_factories").register_class_definition;
register_class_definition("DeleteReferencesItem",DeleteReferencesItem);
