// --------- This code has been automatically generated !!! 2018-04-20T14:13:31.220Z
"use strict";
require("requirish")._(module);
/**
 * @module opcua.address_space.types
 */
var assert = require("better-assert");
var util = require("util");
var _  = require("underscore");
var makeNodeId = require("lib/datamodel/nodeid").makeNodeId;
var schema_helpers =  require("lib/misc/factories_schema_helpers");
var extract_all_fields                       = schema_helpers.extract_all_fields;
var resolve_schema_field_types               = schema_helpers.resolve_schema_field_types;
var initialize_field                         = schema_helpers.initialize_field;
var initialize_field_array                   = schema_helpers.initialize_field_array;
var check_options_correctness_against_schema = schema_helpers.check_options_correctness_against_schema;
var _defaultTypeMap = require("lib/misc/factories_builtin_types")._defaultTypeMap;
var ec = require("lib/misc/encode_decode");
var encodeArray = ec.encodeArray;
var decodeArray = ec.decodeArray;
var makeExpandedNodeId = ec.makeExpandedNodeId;
var generate_new_id = require("lib/misc/factories").generate_new_id;
var _enumerations = require("lib/misc/factories_enumerations")._private._enumerations;
var schema = require("../lib/data_access/schemas/EUInformation_schema").EUInformation_Schema;
var LocalizedText = require("./_auto_generated_LocalizedText").LocalizedText;
var BaseUAObject = require("lib/misc/factories_baseobject").BaseUAObject;

/**
 * 
 * @class EUInformation
 * @constructor
 * @extends BaseUAObject
 * @param  options {Object}
 * @param  [options.namespaceUri = http://www.opcfoundation.org/UA/units/un/cefact] {String} Identifies the organization (company, standards organization) that defines the EUInformation.
 * @param  [options.unitId] {Int32} Identifier for programmatic evaluation. 1 is used if a unitId is not available.
 * @param  [options.displayName] {LocalizedText} The displayName of the engineering  ( for instance 'm/s' )
 * @param  [options.description] {LocalizedText} Contains the full name of the engineering unit such as hour or meter per second
 */
function EUInformation(options)
{
    options = options || {};
    /* istanbul ignore next */
    if (schema_helpers.doDebug) { check_options_correctness_against_schema(this,schema,options); }
    var self = this;
    assert(this instanceof BaseUAObject); //  ' keyword "new" is required for constructor call')
    resolve_schema_field_types(schema);

    BaseUAObject.call(this,options);

    /**
      * Identifies the organization (company, standards organization) that defines the EUInformation.
      * @property namespaceUri
      * @type {String}
      * @default  http://www.opcfoundation.org/UA/units/un/cefact
      */
    self.namespaceUri = initialize_field(schema.fields[0], options.namespaceUri);

    /**
      * Identifier for programmatic evaluation. 1 is used if a unitId is not available.
      * @property unitId
      * @type {Int32}
      */
    self.unitId = initialize_field(schema.fields[1], options.unitId);

    /**
      * The displayName of the engineering  ( for instance 'm/s' )
      * @property displayName
      * @type {LocalizedText}
      */
    self.displayName =  new LocalizedText( options.displayName);

    /**
      * Contains the full name of the engineering unit such as hour or meter per second
      * @property description
      * @type {LocalizedText}
      */
    self.description =  new LocalizedText( options.description);

   // Object.preventExtensions(self);
}
util.inherits(EUInformation,BaseUAObject);
EUInformation.prototype.encodingDefaultBinary = makeExpandedNodeId(889,0);
EUInformation.prototype.encodingDefaultXml = makeExpandedNodeId(888,0);
EUInformation.prototype._schema = schema;

var encode_String = _defaultTypeMap.String.encode;
var decode_String = _defaultTypeMap.String.decode;
var encode_Int32 = _defaultTypeMap.Int32.encode;
var decode_Int32 = _defaultTypeMap.Int32.decode;
/**
 * encode the object into a binary stream
 * @method encode
 *
 * @param stream {BinaryStream} 
 */
EUInformation.prototype.encode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.encode.call(this,stream,options);
    encode_String(this.namespaceUri,stream);
    encode_Int32(this.unitId,stream);
   this.displayName.encode(stream,options);
   this.description.encode(stream,options);
};
/**
 * decode the object from a binary stream
 * @method decode
 *
 * @param stream {BinaryStream} 
 * @param [option] {object} 
 */
EUInformation.prototype.decode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.decode.call(this,stream,options);
    this.namespaceUri = decode_String(stream,options);
    this.unitId = decode_Int32(stream,options);
    this.displayName.decode(stream,options);
    this.description.decode(stream,options);
};
EUInformation.possibleFields = [
  "namespaceUri",
         "unitId",
         "displayName",
         "description"
];


exports.EUInformation = EUInformation;
var register_class_definition = require("lib/misc/factories_factories").register_class_definition;
register_class_definition("EUInformation",EUInformation);
