// --------- This code has been automatically generated !!! 2018-02-01T15:08:09.000Z
"use strict";
require("requirish")._(module);
/**
 * @module opcua.address_space.types
 */
var assert = require("better-assert");
var util = require("util");
var _  = require("underscore");
var makeNodeId = require("lib/datamodel/nodeid").makeNodeId;
var schema_helpers =  require("lib/misc/factories_schema_helpers");
var extract_all_fields                       = schema_helpers.extract_all_fields;
var resolve_schema_field_types               = schema_helpers.resolve_schema_field_types;
var initialize_field                         = schema_helpers.initialize_field;
var initialize_field_array                   = schema_helpers.initialize_field_array;
var check_options_correctness_against_schema = schema_helpers.check_options_correctness_against_schema;
var _defaultTypeMap = require("lib/misc/factories_builtin_types")._defaultTypeMap;
var ec = require("lib/misc/encode_decode");
var encodeArray = ec.encodeArray;
var decodeArray = ec.decodeArray;
var makeExpandedNodeId = ec.makeExpandedNodeId;
var generate_new_id = require("lib/misc/factories").generate_new_id;
var _enumerations = require("lib/misc/factories_enumerations")._private._enumerations;
var schema = require("../schemas/AggregateConfiguration_schema").AggregateConfiguration_Schema;
var BaseUAObject = require("lib/misc/factories_baseobject").BaseUAObject;

/**
 * 
 * @class AggregateConfiguration
 * @constructor
 * @extends BaseUAObject
 * @param  options {Object}
 * @param  [options.useServerCapabilitiesDefaults] {Boolean} 
 * @param  [options.treatUncertainAsBad] {Boolean} 
 * @param  [options.percentDataBad] {Byte} 
 * @param  [options.percentDataGood] {Byte} 
 * @param  [options.useSlopedExtrapolation] {Boolean} 
 */
function AggregateConfiguration(options)
{
    options = options || {};
    /* istanbul ignore next */
    if (schema_helpers.doDebug) { check_options_correctness_against_schema(this,schema,options); }
    var self = this;
    assert(this instanceof BaseUAObject); //  ' keyword "new" is required for constructor call')
    resolve_schema_field_types(schema);

    BaseUAObject.call(this,options);

    /**
      * 
      * @property useServerCapabilitiesDefaults
      * @type {Boolean}
      */
    self.useServerCapabilitiesDefaults = initialize_field(schema.fields[0], options.useServerCapabilitiesDefaults);

    /**
      * 
      * @property treatUncertainAsBad
      * @type {Boolean}
      */
    self.treatUncertainAsBad = initialize_field(schema.fields[1], options.treatUncertainAsBad);

    /**
      * 
      * @property percentDataBad
      * @type {Byte}
      */
    self.percentDataBad = initialize_field(schema.fields[2], options.percentDataBad);

    /**
      * 
      * @property percentDataGood
      * @type {Byte}
      */
    self.percentDataGood = initialize_field(schema.fields[3], options.percentDataGood);

    /**
      * 
      * @property useSlopedExtrapolation
      * @type {Boolean}
      */
    self.useSlopedExtrapolation = initialize_field(schema.fields[4], options.useSlopedExtrapolation);

   // Object.preventExtensions(self);
}
util.inherits(AggregateConfiguration,BaseUAObject);
AggregateConfiguration.prototype.encodingDefaultBinary = makeExpandedNodeId(950,0);
AggregateConfiguration.prototype.encodingDefaultXml = makeExpandedNodeId(949,0);
AggregateConfiguration.prototype._schema = schema;

var encode_Boolean = _defaultTypeMap.Boolean.encode;
var decode_Boolean = _defaultTypeMap.Boolean.decode;
var encode_Byte = _defaultTypeMap.Byte.encode;
var decode_Byte = _defaultTypeMap.Byte.decode;
/**
 * encode the object into a binary stream
 * @method encode
 *
 * @param stream {BinaryStream} 
 */
AggregateConfiguration.prototype.encode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.encode.call(this,stream,options);
    encode_Boolean(this.useServerCapabilitiesDefaults,stream);
    encode_Boolean(this.treatUncertainAsBad,stream);
    encode_Byte(this.percentDataBad,stream);
    encode_Byte(this.percentDataGood,stream);
    encode_Boolean(this.useSlopedExtrapolation,stream);
};
AggregateConfiguration.prototype.decode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.decode.call(this,stream,options);
    this.useServerCapabilitiesDefaults = decode_Boolean(stream,options);
    this.treatUncertainAsBad = decode_Boolean(stream,options);
    this.percentDataBad = decode_Byte(stream,options);
    this.percentDataGood = decode_Byte(stream,options);
    this.useSlopedExtrapolation = decode_Boolean(stream,options);
};
AggregateConfiguration.possibleFields = (function() {
    return [
        "useServerCapabilitiesDefaults",
         "treatUncertainAsBad",
         "percentDataBad",
         "percentDataGood",
         "useSlopedExtrapolation"
    ];
})();


exports.AggregateConfiguration = AggregateConfiguration;
var register_class_definition = require("lib/misc/factories_factories").register_class_definition;
register_class_definition("AggregateConfiguration",AggregateConfiguration);
