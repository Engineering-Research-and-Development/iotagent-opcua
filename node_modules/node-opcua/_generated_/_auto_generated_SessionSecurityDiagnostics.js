// --------- This code has been automatically generated !!! 2018-02-01T15:08:11.077Z
"use strict";
require("requirish")._(module);
/**
 * @module opcua.address_space.types
 */
var assert = require("better-assert");
var util = require("util");
var _  = require("underscore");
var makeNodeId = require("lib/datamodel/nodeid").makeNodeId;
var schema_helpers =  require("lib/misc/factories_schema_helpers");
var extract_all_fields                       = schema_helpers.extract_all_fields;
var resolve_schema_field_types               = schema_helpers.resolve_schema_field_types;
var initialize_field                         = schema_helpers.initialize_field;
var initialize_field_array                   = schema_helpers.initialize_field_array;
var check_options_correctness_against_schema = schema_helpers.check_options_correctness_against_schema;
var _defaultTypeMap = require("lib/misc/factories_builtin_types")._defaultTypeMap;
var ec = require("lib/misc/encode_decode");
var encodeArray = ec.encodeArray;
var decodeArray = ec.decodeArray;
var makeExpandedNodeId = ec.makeExpandedNodeId;
var generate_new_id = require("lib/misc/factories").generate_new_id;
var _enumerations = require("lib/misc/factories_enumerations")._private._enumerations;
var schema = require("../schemas/39394884f696ff0bf66bacc9a8032cc074e0158e/SessionSecurityDiagnostics_schema").SessionSecurityDiagnostics_Schema;
var BaseUAObject = require("lib/misc/factories_baseobject").BaseUAObject;

//## Define special behavior for Enumeration
var _enum_properties = {
    "securityMode": {
        hidden: false,
        enumerable: true,
        configurable: false,
            get: function() {
                return this.$securityMode;
            },
            set: function(value) {
                var coercedValue = _enumerations.MessageSecurityMode.typedEnum.get(value);
                /* istanbul ignore next */
                if ( coercedValue === undefined || coercedValue === null) {
                      throw new Error("value cannot be coerced to MessageSecurityMode: " + value);
                }
                this.$securityMode = coercedValue;
            }
    },
    "$securityMode": {
         configurable: false,
         value: 'aaaa',
         hidden: true,
         writable: true,
         enumerable: false
    },
};


/**
 * 
 * @class SessionSecurityDiagnostics
 * @constructor
 * @extends BaseUAObject
 * @param  options {Object}
 * @param  [options.sessionId] {NodeId} 
 * @param  [options.clientUserIdOfSession] {String} 
 * @param  [options.clientUserIdHistory] {String} 
 * @param  [options.authenticationMechanism] {String} 
 * @param  [options.encoding] {String} 
 * @param  [options.transportProtocol] {String} 
 * @param  [options.securityMode] {MessageSecurityMode} 
 * @param  [options.securityPolicyUri] {String} 
 * @param  [options.clientCertificate] {ByteString} 
 */
function SessionSecurityDiagnostics(options)
{
    options = options || {};
    /* istanbul ignore next */
    if (schema_helpers.doDebug) { check_options_correctness_against_schema(this,schema,options); }
    var self = this;
    assert(this instanceof BaseUAObject); //  ' keyword "new" is required for constructor call')
    resolve_schema_field_types(schema);

    BaseUAObject.call(this,options);

    /**
      * 
      * @property sessionId
      * @type {NodeId}
      */
    self.sessionId = initialize_field(schema.fields[0], options.sessionId);

    /**
      * 
      * @property clientUserIdOfSession
      * @type {String}
      */
    self.clientUserIdOfSession = initialize_field(schema.fields[1], options.clientUserIdOfSession);

    /**
      * 
      * @property clientUserIdHistory
      * @type {String}
      */
    self.clientUserIdHistory = initialize_field(schema.fields[2], options.clientUserIdHistory);

    /**
      * 
      * @property authenticationMechanism
      * @type {String}
      */
    self.authenticationMechanism = initialize_field(schema.fields[3], options.authenticationMechanism);

    /**
      * 
      * @property encoding
      * @type {String}
      */
    self.encoding = initialize_field(schema.fields[4], options.encoding);

    /**
      * 
      * @property transportProtocol
      * @type {String}
      */
    self.transportProtocol = initialize_field(schema.fields[5], options.transportProtocol);

    /**
      * 
      * @property securityMode
      * @type {MessageSecurityMode}
      */
    self.securityMode = initialize_field(schema.fields[6], options.securityMode);

    /**
      * 
      * @property securityPolicyUri
      * @type {String}
      */
    self.securityPolicyUri = initialize_field(schema.fields[7], options.securityPolicyUri);

    /**
      * 
      * @property clientCertificate
      * @type {ByteString}
      */
    self.clientCertificate = initialize_field(schema.fields[8], options.clientCertificate);

   // Object.preventExtensions(self);
}
util.inherits(SessionSecurityDiagnostics,BaseUAObject);

//define enumeration properties
Object.defineProperties(SessionSecurityDiagnostics.prototype,_enum_properties);
SessionSecurityDiagnostics.prototype.encodingDefaultBinary = makeExpandedNodeId(870,0);
SessionSecurityDiagnostics.prototype._schema = schema;

var encode_NodeId = _defaultTypeMap.NodeId.encode;
var decode_NodeId = _defaultTypeMap.NodeId.decode;
var encode_String = _defaultTypeMap.String.encode;
var decode_String = _defaultTypeMap.String.decode;
var encode_MessageSecurityMode = _enumerations.MessageSecurityMode.encode;
var decode_MessageSecurityMode = _enumerations.MessageSecurityMode.decode;
var encode_ByteString = _defaultTypeMap.ByteString.encode;
var decode_ByteString = _defaultTypeMap.ByteString.decode;
/**
 * encode the object into a binary stream
 * @method encode
 *
 * @param stream {BinaryStream} 
 */
SessionSecurityDiagnostics.prototype.encode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.encode.call(this,stream,options);
    encode_NodeId(this.sessionId,stream);
    encode_String(this.clientUserIdOfSession,stream);
    encode_String(this.clientUserIdHistory,stream);
    encode_String(this.authenticationMechanism,stream);
    encode_String(this.encoding,stream);
    encode_String(this.transportProtocol,stream);
    encode_MessageSecurityMode(this.securityMode,stream);
    encode_String(this.securityPolicyUri,stream);
    encode_ByteString(this.clientCertificate,stream);
};
SessionSecurityDiagnostics.prototype.decode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.decode.call(this,stream,options);
    this.sessionId = decode_NodeId(stream,options);
    this.clientUserIdOfSession = decode_String(stream,options);
    this.clientUserIdHistory = decode_String(stream,options);
    this.authenticationMechanism = decode_String(stream,options);
    this.encoding = decode_String(stream,options);
    this.transportProtocol = decode_String(stream,options);
    this.securityMode = decode_MessageSecurityMode(stream,options);
    this.securityPolicyUri = decode_String(stream,options);
    this.clientCertificate = decode_ByteString(stream,options);
};
SessionSecurityDiagnostics.possibleFields = (function() {
    return [
        "sessionId",
         "clientUserIdOfSession",
         "clientUserIdHistory",
         "authenticationMechanism",
         "encoding",
         "transportProtocol",
         "securityMode",
         "securityPolicyUri",
         "clientCertificate"
    ];
})();


exports.SessionSecurityDiagnostics = SessionSecurityDiagnostics;
var register_class_definition = require("lib/misc/factories_factories").register_class_definition;
register_class_definition("SessionSecurityDiagnostics",SessionSecurityDiagnostics);
