// --------- This code has been automatically generated !!! 2018-02-01T15:08:08.938Z
"use strict";
require("requirish")._(module);
/**
 * @module opcua.address_space.types
 */
var assert = require("better-assert");
var util = require("util");
var _  = require("underscore");
var makeNodeId = require("lib/datamodel/nodeid").makeNodeId;
var schema_helpers =  require("lib/misc/factories_schema_helpers");
var extract_all_fields                       = schema_helpers.extract_all_fields;
var resolve_schema_field_types               = schema_helpers.resolve_schema_field_types;
var initialize_field                         = schema_helpers.initialize_field;
var initialize_field_array                   = schema_helpers.initialize_field_array;
var check_options_correctness_against_schema = schema_helpers.check_options_correctness_against_schema;
var _defaultTypeMap = require("lib/misc/factories_builtin_types")._defaultTypeMap;
var ec = require("lib/misc/encode_decode");
var encodeArray = ec.encodeArray;
var decodeArray = ec.decodeArray;
var makeExpandedNodeId = ec.makeExpandedNodeId;
var generate_new_id = require("lib/misc/factories").generate_new_id;
var _enumerations = require("lib/misc/factories_enumerations")._private._enumerations;
var schema = require("../schemas/DataChangeFilter_schema").DataChangeFilter_Schema;
var BaseUAObject = require("lib/misc/factories_baseobject").BaseUAObject;

//## Define special behavior for Enumeration
var _enum_properties = {
    "trigger": {
        hidden: false,
        enumerable: true,
        configurable: false,
            get: function() {
                return this.$trigger;
            },
            set: function(value) {
                var coercedValue = _enumerations.DataChangeTrigger.typedEnum.get(value);
                /* istanbul ignore next */
                if ( coercedValue === undefined || coercedValue === null) {
                      throw new Error("value cannot be coerced to DataChangeTrigger: " + value);
                }
                this.$trigger = coercedValue;
            }
    },
    "$trigger": {
         configurable: false,
         value: 'aaaa',
         hidden: true,
         writable: true,
         enumerable: false
    },
    "deadbandType": {
        hidden: false,
        enumerable: true,
        configurable: false,
            get: function() {
                return this.$deadbandType;
            },
            set: function(value) {
                var coercedValue = _enumerations.DeadbandType.typedEnum.get(value);
                /* istanbul ignore next */
                if ( coercedValue === undefined || coercedValue === null) {
                      throw new Error("value cannot be coerced to DeadbandType: " + value);
                }
                this.$deadbandType = coercedValue;
            }
    },
    "$deadbandType": {
         configurable: false,
         value: 'aaaa',
         hidden: true,
         writable: true,
         enumerable: false
    },
};


/**
 * 
 * @class DataChangeFilter
 * @constructor
 * @extends BaseUAObject
 * @param  options {Object}
 * @param  [options.trigger] {DataChangeTrigger} 
 * @param  [options.deadbandType] {DeadbandType} 
 * @param  [options.deadbandValue] {Double} 
 */
function DataChangeFilter(options)
{
    options = options || {};
    /* istanbul ignore next */
    if (schema_helpers.doDebug) { check_options_correctness_against_schema(this,schema,options); }
    var self = this;
    assert(this instanceof BaseUAObject); //  ' keyword "new" is required for constructor call')
    resolve_schema_field_types(schema);

    BaseUAObject.call(this,options);

    /**
      * 
      * @property trigger
      * @type {DataChangeTrigger}
      */
    self.trigger = initialize_field(schema.fields[0], options.trigger);

    /**
      * 
      * @property deadbandType
      * @type {DeadbandType}
      */
    self.deadbandType = initialize_field(schema.fields[1], options.deadbandType);

    /**
      * 
      * @property deadbandValue
      * @type {Double}
      */
    self.deadbandValue = initialize_field(schema.fields[2], options.deadbandValue);

   // Object.preventExtensions(self);
}
util.inherits(DataChangeFilter,BaseUAObject);

//define enumeration properties
Object.defineProperties(DataChangeFilter.prototype,_enum_properties);
DataChangeFilter.prototype.encodingDefaultBinary = makeExpandedNodeId(724,0);
DataChangeFilter.prototype.encodingDefaultXml = makeExpandedNodeId(723,0);
DataChangeFilter.prototype._schema = schema;

var encode_DataChangeTrigger = _enumerations.DataChangeTrigger.encode;
var decode_DataChangeTrigger = _enumerations.DataChangeTrigger.decode;
var encode_DeadbandType = _enumerations.DeadbandType.encode;
var decode_DeadbandType = _enumerations.DeadbandType.decode;
var encode_Double = _defaultTypeMap.Double.encode;
var decode_Double = _defaultTypeMap.Double.decode;
/**
 * encode the object into a binary stream
 * @method encode
 *
 * @param stream {BinaryStream} 
 */
DataChangeFilter.prototype.encode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.encode.call(this,stream,options);
    encode_DataChangeTrigger(this.trigger,stream);
    encode_DeadbandType(this.deadbandType,stream);
    encode_Double(this.deadbandValue,stream);
};
DataChangeFilter.prototype.decode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.decode.call(this,stream,options);
    this.trigger = decode_DataChangeTrigger(stream,options);
    this.deadbandType = decode_DeadbandType(stream,options);
    this.deadbandValue = decode_Double(stream,options);
};
DataChangeFilter.possibleFields = (function() {
    return [
        "trigger",
         "deadbandType",
         "deadbandValue"
    ];
})();


exports.DataChangeFilter = DataChangeFilter;
var register_class_definition = require("lib/misc/factories_factories").register_class_definition;
register_class_definition("DataChangeFilter",DataChangeFilter);
