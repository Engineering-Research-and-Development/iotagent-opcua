// --------- This code has been automatically generated !!! 2018-04-20T14:13:31.411Z
"use strict";
require("requirish")._(module);
/**
 * @module opcua.address_space.types
 */
var assert = require("better-assert");
var util = require("util");
var _  = require("underscore");
var makeNodeId = require("lib/datamodel/nodeid").makeNodeId;
var schema_helpers =  require("lib/misc/factories_schema_helpers");
var extract_all_fields                       = schema_helpers.extract_all_fields;
var resolve_schema_field_types               = schema_helpers.resolve_schema_field_types;
var initialize_field                         = schema_helpers.initialize_field;
var initialize_field_array                   = schema_helpers.initialize_field_array;
var check_options_correctness_against_schema = schema_helpers.check_options_correctness_against_schema;
var _defaultTypeMap = require("lib/misc/factories_builtin_types")._defaultTypeMap;
var ec = require("lib/misc/encode_decode");
var encodeArray = ec.encodeArray;
var decodeArray = ec.decodeArray;
var makeExpandedNodeId = ec.makeExpandedNodeId;
var generate_new_id = require("lib/misc/factories").generate_new_id;
var _enumerations = require("lib/misc/factories_enumerations")._private._enumerations;
var schema = require("../schemas/TranslateBrowsePathsToNodeIdsResponse_schema").TranslateBrowsePathsToNodeIdsResponse_Schema;
var ResponseHeader = require("./_auto_generated_ResponseHeader").ResponseHeader;
var BrowsePathResult = require("./_auto_generated_BrowsePathResult").BrowsePathResult;
var DiagnosticInfo = require("./_auto_generated_DiagnosticInfo").DiagnosticInfo;
var BaseUAObject = require("lib/misc/factories_baseobject").BaseUAObject;

/**
 * 
 * @class TranslateBrowsePathsToNodeIdsResponse
 * @constructor
 * @extends BaseUAObject
 * @param  options {Object}
 * @param  [options.responseHeader] {ResponseHeader} 
 * @param  [options.results] {BrowsePathResult[]} The results for the translate operations.
 * @param  [options.diagnosticInfos] {DiagnosticInfo[]} The diagnostics associated with the results.
 */
function TranslateBrowsePathsToNodeIdsResponse(options)
{
    options = options || {};
    /* istanbul ignore next */
    if (schema_helpers.doDebug) { check_options_correctness_against_schema(this,schema,options); }
    var self = this;
    assert(this instanceof BaseUAObject); //  ' keyword "new" is required for constructor call')
    resolve_schema_field_types(schema);

    BaseUAObject.call(this,options);

    /**
      * 
      * @property responseHeader
      * @type {ResponseHeader}
      */
    self.responseHeader =  new ResponseHeader( options.responseHeader);

    /**
      * The results for the translate operations.
      * @property results
      * @type {BrowsePathResult[]}
      */
    self.results = [];
    if (options.results) {
        assert(_.isArray(options.results));
        self.results = options.results.map(function(e){ return new BrowsePathResult(e); } );
    }

    /**
      * The diagnostics associated with the results.
      * @property diagnosticInfos
      * @type {DiagnosticInfo[]}
      */
    self.diagnosticInfos = [];
    if (options.diagnosticInfos) {
        assert(_.isArray(options.diagnosticInfos));
        self.diagnosticInfos = options.diagnosticInfos.map(function(e){ return new DiagnosticInfo(e); } );
    }

   // Object.preventExtensions(self);
}
util.inherits(TranslateBrowsePathsToNodeIdsResponse,BaseUAObject);
TranslateBrowsePathsToNodeIdsResponse.prototype.encodingDefaultBinary = makeExpandedNodeId(557,0);
TranslateBrowsePathsToNodeIdsResponse.prototype.encodingDefaultXml = makeExpandedNodeId(556,0);
TranslateBrowsePathsToNodeIdsResponse.prototype._schema = schema;

/**
 * encode the object into a binary stream
 * @method encode
 *
 * @param stream {BinaryStream} 
 */
TranslateBrowsePathsToNodeIdsResponse.prototype.encode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.encode.call(this,stream,options);
   this.responseHeader.encode(stream,options);
    encodeArray(this.results,stream,function(obj,stream){ obj.encode(stream,options); }); 
    encodeArray(this.diagnosticInfos,stream,function(obj,stream){ obj.encode(stream,options); }); 
};
/**
 * decode the object from a binary stream
 * @method decode
 *
 * @param stream {BinaryStream} 
 * @param [option] {object} 
 */
TranslateBrowsePathsToNodeIdsResponse.prototype.decode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.decode.call(this,stream,options);
    this.responseHeader.decode(stream,options);
    this.results = decodeArray(stream, function(stream) { 
       var obj = new BrowsePathResult();
       obj.decode(stream,options);
       return obj; 
    });
    this.diagnosticInfos = decodeArray(stream, function(stream) { 
       var obj = new DiagnosticInfo();
       obj.decode(stream,options);
       return obj; 
    });
};
TranslateBrowsePathsToNodeIdsResponse.possibleFields = [
  "responseHeader",
         "results",
         "diagnosticInfos"
];


exports.TranslateBrowsePathsToNodeIdsResponse = TranslateBrowsePathsToNodeIdsResponse;
var register_class_definition = require("lib/misc/factories_factories").register_class_definition;
register_class_definition("TranslateBrowsePathsToNodeIdsResponse",TranslateBrowsePathsToNodeIdsResponse);
