// --------- This code has been automatically generated !!! 2018-02-01T15:08:09.065Z
"use strict";
require("requirish")._(module);
/**
 * @module opcua.address_space.types
 */
var assert = require("better-assert");
var util = require("util");
var _  = require("underscore");
var makeNodeId = require("lib/datamodel/nodeid").makeNodeId;
var schema_helpers =  require("lib/misc/factories_schema_helpers");
var extract_all_fields                       = schema_helpers.extract_all_fields;
var resolve_schema_field_types               = schema_helpers.resolve_schema_field_types;
var initialize_field                         = schema_helpers.initialize_field;
var initialize_field_array                   = schema_helpers.initialize_field_array;
var check_options_correctness_against_schema = schema_helpers.check_options_correctness_against_schema;
var _defaultTypeMap = require("lib/misc/factories_builtin_types")._defaultTypeMap;
var ec = require("lib/misc/encode_decode");
var encodeArray = ec.encodeArray;
var decodeArray = ec.decodeArray;
var makeExpandedNodeId = ec.makeExpandedNodeId;
var generate_new_id = require("lib/misc/factories").generate_new_id;
var _enumerations = require("lib/misc/factories_enumerations")._private._enumerations;
var schema = require("../schemas/BrowsePathTarget_schema").BrowsePathTarget_Schema;
var BaseUAObject = require("lib/misc/factories_baseobject").BaseUAObject;

/**
 * The target of the translated path.
 * 
 * @class BrowsePathTarget
 * @constructor
 * @extends BaseUAObject
 * @param  options {Object}
 * @param  [options.targetId] {ExpandedNodeId} The id of the target node.
 * @param  [options.remainingPathIndex] {UInt32} The index of the target in the relative path. UInt32.MaxValue if the entire path was processed.
 */
function BrowsePathTarget(options)
{
    options = options || {};
    /* istanbul ignore next */
    if (schema_helpers.doDebug) { check_options_correctness_against_schema(this,schema,options); }
    var self = this;
    assert(this instanceof BaseUAObject); //  ' keyword "new" is required for constructor call')
    resolve_schema_field_types(schema);

    BaseUAObject.call(this,options);

    /**
      * The id of the target node.
      * @property targetId
      * @type {ExpandedNodeId}
      */
    self.targetId = initialize_field(schema.fields[0], options.targetId);

    /**
      * The index of the target in the relative path. UInt32.MaxValue if the entire path was processed.
      * @property remainingPathIndex
      * @type {UInt32}
      */
    self.remainingPathIndex = initialize_field(schema.fields[1], options.remainingPathIndex);

   // Object.preventExtensions(self);
}
util.inherits(BrowsePathTarget,BaseUAObject);
BrowsePathTarget.prototype.encodingDefaultBinary = makeExpandedNodeId(548,0);
BrowsePathTarget.prototype.encodingDefaultXml = makeExpandedNodeId(547,0);
BrowsePathTarget.prototype._schema = schema;

var encode_ExpandedNodeId = _defaultTypeMap.ExpandedNodeId.encode;
var decode_ExpandedNodeId = _defaultTypeMap.ExpandedNodeId.decode;
var encode_UInt32 = _defaultTypeMap.UInt32.encode;
var decode_UInt32 = _defaultTypeMap.UInt32.decode;
/**
 * encode the object into a binary stream
 * @method encode
 *
 * @param stream {BinaryStream} 
 */
BrowsePathTarget.prototype.encode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.encode.call(this,stream,options);
    encode_ExpandedNodeId(this.targetId,stream);
    encode_UInt32(this.remainingPathIndex,stream);
};
BrowsePathTarget.prototype.decode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.decode.call(this,stream,options);
    this.targetId = decode_ExpandedNodeId(stream,options);
    this.remainingPathIndex = decode_UInt32(stream,options);
};
BrowsePathTarget.possibleFields = (function() {
    return [
        "targetId",
         "remainingPathIndex"
    ];
})();


exports.BrowsePathTarget = BrowsePathTarget;
var register_class_definition = require("lib/misc/factories_factories").register_class_definition;
register_class_definition("BrowsePathTarget",BrowsePathTarget);
