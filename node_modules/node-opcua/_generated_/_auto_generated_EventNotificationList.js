// --------- This code has been automatically generated !!! 2018-02-01T15:08:08.968Z
"use strict";
require("requirish")._(module);
/**
 * @module opcua.address_space.types
 */
var assert = require("better-assert");
var util = require("util");
var _  = require("underscore");
var makeNodeId = require("lib/datamodel/nodeid").makeNodeId;
var schema_helpers =  require("lib/misc/factories_schema_helpers");
var extract_all_fields                       = schema_helpers.extract_all_fields;
var resolve_schema_field_types               = schema_helpers.resolve_schema_field_types;
var initialize_field                         = schema_helpers.initialize_field;
var initialize_field_array                   = schema_helpers.initialize_field_array;
var check_options_correctness_against_schema = schema_helpers.check_options_correctness_against_schema;
var _defaultTypeMap = require("lib/misc/factories_builtin_types")._defaultTypeMap;
var ec = require("lib/misc/encode_decode");
var encodeArray = ec.encodeArray;
var decodeArray = ec.decodeArray;
var makeExpandedNodeId = ec.makeExpandedNodeId;
var generate_new_id = require("lib/misc/factories").generate_new_id;
var _enumerations = require("lib/misc/factories_enumerations")._private._enumerations;
var schema = require("../schemas/EventNotificationList_schema").EventNotificationList_Schema;
var EventFieldList = require("./_auto_generated_EventFieldList").EventFieldList;
var BaseUAObject = require("lib/misc/factories_baseobject").BaseUAObject;

/**
 * 
 * @class EventNotificationList
 * @constructor
 * @extends BaseUAObject
 * @param  options {Object}
 * @param  [options.events] {EventFieldList[]} The list of Events being delivered. This structure is defined in-line with the following indented items.
 */
function EventNotificationList(options)
{
    options = options || {};
    /* istanbul ignore next */
    if (schema_helpers.doDebug) { check_options_correctness_against_schema(this,schema,options); }
    var self = this;
    assert(this instanceof BaseUAObject); //  ' keyword "new" is required for constructor call')
    resolve_schema_field_types(schema);

    BaseUAObject.call(this,options);

    /**
      * The list of Events being delivered. This structure is defined in-line with the following indented items.
      * @property events
      * @type {EventFieldList[]}
      */
    self.events = [];
    if (options.events) {
        assert(_.isArray(options.events));
        self.events = options.events.map(function(e){ return new EventFieldList(e); } );
    }

   // Object.preventExtensions(self);
}
util.inherits(EventNotificationList,BaseUAObject);
EventNotificationList.prototype.encodingDefaultBinary = makeExpandedNodeId(916,0);
EventNotificationList.prototype.encodingDefaultXml = makeExpandedNodeId(915,0);
EventNotificationList.prototype._schema = schema;

/**
 * encode the object into a binary stream
 * @method encode
 *
 * @param stream {BinaryStream} 
 */
EventNotificationList.prototype.encode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.encode.call(this,stream,options);
    encodeArray(this.events,stream,function(obj,stream){ obj.encode(stream,options); }); 
};
EventNotificationList.prototype.decode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.decode.call(this,stream,options);
    this.events = decodeArray(stream, function(stream) { 
       var obj = new EventFieldList();
       obj.decode(stream,options);
       return obj; 
    });
};
EventNotificationList.possibleFields = (function() {
    return [
        "events"
    ];
})();


exports.EventNotificationList = EventNotificationList;
var register_class_definition = require("lib/misc/factories_factories").register_class_definition;
register_class_definition("EventNotificationList",EventNotificationList);
