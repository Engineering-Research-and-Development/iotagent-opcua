// --------- This code has been automatically generated !!! 2018-04-20T14:13:31.473Z
"use strict";
require("requirish")._(module);
/**
 * @module opcua.address_space.types
 */
var assert = require("better-assert");
var util = require("util");
var _  = require("underscore");
var makeNodeId = require("lib/datamodel/nodeid").makeNodeId;
var schema_helpers =  require("lib/misc/factories_schema_helpers");
var extract_all_fields                       = schema_helpers.extract_all_fields;
var resolve_schema_field_types               = schema_helpers.resolve_schema_field_types;
var initialize_field                         = schema_helpers.initialize_field;
var initialize_field_array                   = schema_helpers.initialize_field_array;
var check_options_correctness_against_schema = schema_helpers.check_options_correctness_against_schema;
var _defaultTypeMap = require("lib/misc/factories_builtin_types")._defaultTypeMap;
var ec = require("lib/misc/encode_decode");
var encodeArray = ec.encodeArray;
var decodeArray = ec.decodeArray;
var makeExpandedNodeId = ec.makeExpandedNodeId;
var generate_new_id = require("lib/misc/factories").generate_new_id;
var _enumerations = require("lib/misc/factories_enumerations")._private._enumerations;
var schema = require("../schemas/ReadProcessedDetails_schema").ReadProcessedDetails_Schema;
var AggregateConfiguration = require("./_auto_generated_AggregateConfiguration").AggregateConfiguration;
var BaseUAObject = require("lib/misc/factories_baseobject").BaseUAObject;
var HistoryReadDetails = require("./_auto_generated_HistoryReadDetails").HistoryReadDetails;

/**
 * 
 * @class ReadProcessedDetails
 * @constructor
 * @extends HistoryReadDetails
 * @param  options {Object}
 * @param  [options.startTime] {DateTime} 
 * @param  [options.endTime] {DateTime} 
 * @param  [options.processingInterval] {DateTime} 
 * @param  [options.aggregateType] {NodeId[]} 
 * @param  [options.aggregateConfiguration] {AggregateConfiguration} 
 */
function ReadProcessedDetails(options)
{
    options = options || {};
    /* istanbul ignore next */
    if (schema_helpers.doDebug) { check_options_correctness_against_schema(this,schema,options); }
    var self = this;
    assert(this instanceof BaseUAObject); //  ' keyword "new" is required for constructor call')
    resolve_schema_field_types(schema);

    HistoryReadDetails.call(this,options);

    /**
      * 
      * @property startTime
      * @type {DateTime}
      */
    self.startTime = initialize_field(schema.fields[0], options.startTime);

    /**
      * 
      * @property endTime
      * @type {DateTime}
      */
    self.endTime = initialize_field(schema.fields[1], options.endTime);

    /**
      * 
      * @property processingInterval
      * @type {DateTime}
      */
    self.processingInterval = initialize_field(schema.fields[2], options.processingInterval);

    /**
      * 
      * @property aggregateType
      * @type {NodeId[]}
      */
    self.aggregateType = initialize_field_array(schema.fields[3], options.aggregateType);

    /**
      * 
      * @property aggregateConfiguration
      * @type {AggregateConfiguration}
      */
    self.aggregateConfiguration =  new AggregateConfiguration( options.aggregateConfiguration);

   // Object.preventExtensions(self);
}
util.inherits(ReadProcessedDetails,HistoryReadDetails);
ReadProcessedDetails.prototype.encodingDefaultBinary = makeExpandedNodeId(652,0);
ReadProcessedDetails.prototype.encodingDefaultXml = makeExpandedNodeId(651,0);
ReadProcessedDetails.prototype._schema = schema;

var encode_DateTime = _defaultTypeMap.DateTime.encode;
var decode_DateTime = _defaultTypeMap.DateTime.decode;
var encode_NodeId = _defaultTypeMap.NodeId.encode;
var decode_NodeId = _defaultTypeMap.NodeId.decode;
/**
 * encode the object into a binary stream
 * @method encode
 *
 * @param stream {BinaryStream} 
 */
ReadProcessedDetails.prototype.encode = function(stream,options) {
    // call base class implementation first
    HistoryReadDetails.prototype.encode.call(this,stream,options);
    encode_DateTime(this.startTime,stream);
    encode_DateTime(this.endTime,stream);
    encode_DateTime(this.processingInterval,stream);
    encodeArray(this.aggregateType, stream, encode_NodeId);
   this.aggregateConfiguration.encode(stream,options);
};
/**
 * decode the object from a binary stream
 * @method decode
 *
 * @param stream {BinaryStream} 
 * @param [option] {object} 
 */
ReadProcessedDetails.prototype.decode = function(stream,options) {
    // call base class implementation first
    HistoryReadDetails.prototype.decode.call(this,stream,options);
    this.startTime = decode_DateTime(stream,options);
    this.endTime = decode_DateTime(stream,options);
    this.processingInterval = decode_DateTime(stream,options);
    this.aggregateType = decodeArray(stream, decode_NodeId);
    this.aggregateConfiguration.decode(stream,options);
};
ReadProcessedDetails.possibleFields = [
  "startTime",
         "endTime",
         "processingInterval",
         "aggregateType",
         "aggregateConfiguration"
];


exports.ReadProcessedDetails = ReadProcessedDetails;
var register_class_definition = require("lib/misc/factories_factories").register_class_definition;
register_class_definition("ReadProcessedDetails",ReadProcessedDetails);
