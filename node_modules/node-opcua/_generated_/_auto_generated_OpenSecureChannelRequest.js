// --------- This code has been automatically generated !!! 2018-02-01T15:08:08.744Z
"use strict";
require("requirish")._(module);
/**
 * @module opcua.address_space.types
 */
var assert = require("better-assert");
var util = require("util");
var _  = require("underscore");
var makeNodeId = require("lib/datamodel/nodeid").makeNodeId;
var schema_helpers =  require("lib/misc/factories_schema_helpers");
var extract_all_fields                       = schema_helpers.extract_all_fields;
var resolve_schema_field_types               = schema_helpers.resolve_schema_field_types;
var initialize_field                         = schema_helpers.initialize_field;
var initialize_field_array                   = schema_helpers.initialize_field_array;
var check_options_correctness_against_schema = schema_helpers.check_options_correctness_against_schema;
var _defaultTypeMap = require("lib/misc/factories_builtin_types")._defaultTypeMap;
var ec = require("lib/misc/encode_decode");
var encodeArray = ec.encodeArray;
var decodeArray = ec.decodeArray;
var makeExpandedNodeId = ec.makeExpandedNodeId;
var generate_new_id = require("lib/misc/factories").generate_new_id;
var _enumerations = require("lib/misc/factories_enumerations")._private._enumerations;
var schema = require("../schemas/OpenSecureChannelRequest_schema").OpenSecureChannelRequest_Schema;
var RequestHeader = require("./_auto_generated_RequestHeader").RequestHeader;
var BaseUAObject = require("lib/misc/factories_baseobject").BaseUAObject;

//## Define special behavior for Enumeration
var _enum_properties = {
    "requestType": {
        hidden: false,
        enumerable: true,
        configurable: false,
            get: function() {
                return this.$requestType;
            },
            set: function(value) {
                var coercedValue = _enumerations.SecurityTokenRequestType.typedEnum.get(value);
                /* istanbul ignore next */
                if ( coercedValue === undefined || coercedValue === null) {
                      throw new Error("value cannot be coerced to SecurityTokenRequestType: " + value);
                }
                this.$requestType = coercedValue;
            }
    },
    "$requestType": {
         configurable: false,
         value: 'aaaa',
         hidden: true,
         writable: true,
         enumerable: false
    },
    "securityMode": {
        hidden: false,
        enumerable: true,
        configurable: false,
            get: function() {
                return this.$securityMode;
            },
            set: function(value) {
                var coercedValue = _enumerations.MessageSecurityMode.typedEnum.get(value);
                /* istanbul ignore next */
                if ( coercedValue === undefined || coercedValue === null) {
                      throw new Error("value cannot be coerced to MessageSecurityMode: " + value);
                }
                this.$securityMode = coercedValue;
            }
    },
    "$securityMode": {
         configurable: false,
         value: 'aaaa',
         hidden: true,
         writable: true,
         enumerable: false
    },
};


/**
 * 
 * @class OpenSecureChannelRequest
 * @constructor
 * @extends BaseUAObject
 * @param  options {Object}
 * @param  [options.requestHeader] {RequestHeader} 
 * @param  [options.clientProtocolVersion] {UInt32} The version of protocol used by the client
 * @param  [options.requestType] {SecurityTokenRequestType} Whether the channel is being created or renewed
 * @param  [options.securityMode] {MessageSecurityMode} The security mode to use with the channel.
 * @param  [options.clientNonce] {ByteString} A random number generated by the client.
 * @param  [options.requestedLifetime] {UInt32} The channel lifetime in milliseconds.
 */
function OpenSecureChannelRequest(options)
{
    options = options || {};
    /* istanbul ignore next */
    if (schema_helpers.doDebug) { check_options_correctness_against_schema(this,schema,options); }
    var self = this;
    assert(this instanceof BaseUAObject); //  ' keyword "new" is required for constructor call')
    resolve_schema_field_types(schema);

    BaseUAObject.call(this,options);

    /**
      * 
      * @property requestHeader
      * @type {RequestHeader}
      */
    self.requestHeader =  new RequestHeader( options.requestHeader);

    /**
      * The version of protocol used by the client
      * @property clientProtocolVersion
      * @type {UInt32}
      */
    self.clientProtocolVersion = initialize_field(schema.fields[1], options.clientProtocolVersion);

    /**
      * Whether the channel is being created or renewed
      * @property requestType
      * @type {SecurityTokenRequestType}
      */
    self.requestType = initialize_field(schema.fields[2], options.requestType);

    /**
      * The security mode to use with the channel.
      * @property securityMode
      * @type {MessageSecurityMode}
      */
    self.securityMode = initialize_field(schema.fields[3], options.securityMode);

    /**
      * A random number generated by the client.
      * @property clientNonce
      * @type {ByteString}
      */
    self.clientNonce = initialize_field(schema.fields[4], options.clientNonce);

    /**
      * The channel lifetime in milliseconds.
      * @property requestedLifetime
      * @type {UInt32}
      */
    self.requestedLifetime = initialize_field(schema.fields[5], options.requestedLifetime);

   // Object.preventExtensions(self);
}
util.inherits(OpenSecureChannelRequest,BaseUAObject);

//define enumeration properties
Object.defineProperties(OpenSecureChannelRequest.prototype,_enum_properties);
OpenSecureChannelRequest.prototype.encodingDefaultBinary = makeExpandedNodeId(446,0);
OpenSecureChannelRequest.prototype.encodingDefaultXml = makeExpandedNodeId(445,0);
OpenSecureChannelRequest.prototype._schema = schema;

var encode_UInt32 = _defaultTypeMap.UInt32.encode;
var decode_UInt32 = _defaultTypeMap.UInt32.decode;
var encode_SecurityTokenRequestType = _enumerations.SecurityTokenRequestType.encode;
var decode_SecurityTokenRequestType = _enumerations.SecurityTokenRequestType.decode;
var encode_MessageSecurityMode = _enumerations.MessageSecurityMode.encode;
var decode_MessageSecurityMode = _enumerations.MessageSecurityMode.decode;
var encode_ByteString = _defaultTypeMap.ByteString.encode;
var decode_ByteString = _defaultTypeMap.ByteString.decode;
/**
 * encode the object into a binary stream
 * @method encode
 *
 * @param stream {BinaryStream} 
 */
OpenSecureChannelRequest.prototype.encode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.encode.call(this,stream,options);
   this.requestHeader.encode(stream,options);
    encode_UInt32(this.clientProtocolVersion,stream);
    encode_SecurityTokenRequestType(this.requestType,stream);
    encode_MessageSecurityMode(this.securityMode,stream);
    encode_ByteString(this.clientNonce,stream);
    encode_UInt32(this.requestedLifetime,stream);
};
OpenSecureChannelRequest.prototype.decode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.decode.call(this,stream,options);
    this.requestHeader.decode(stream,options);
    this.clientProtocolVersion = decode_UInt32(stream,options);
    this.requestType = decode_SecurityTokenRequestType(stream,options);
    this.securityMode = decode_MessageSecurityMode(stream,options);
    this.clientNonce = decode_ByteString(stream,options);
    this.requestedLifetime = decode_UInt32(stream,options);
};
OpenSecureChannelRequest.possibleFields = (function() {
    return [
        "requestHeader",
         "clientProtocolVersion",
         "requestType",
         "securityMode",
         "clientNonce",
         "requestedLifetime"
    ];
})();


exports.OpenSecureChannelRequest = OpenSecureChannelRequest;
var register_class_definition = require("lib/misc/factories_factories").register_class_definition;
register_class_definition("OpenSecureChannelRequest",OpenSecureChannelRequest);
