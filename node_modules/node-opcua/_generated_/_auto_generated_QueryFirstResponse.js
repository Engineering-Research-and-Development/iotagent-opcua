// --------- This code has been automatically generated !!! 2018-02-01T15:08:09.278Z
"use strict";
require("requirish")._(module);
/**
 * @module opcua.address_space.types
 */
var assert = require("better-assert");
var util = require("util");
var _  = require("underscore");
var makeNodeId = require("lib/datamodel/nodeid").makeNodeId;
var schema_helpers =  require("lib/misc/factories_schema_helpers");
var extract_all_fields                       = schema_helpers.extract_all_fields;
var resolve_schema_field_types               = schema_helpers.resolve_schema_field_types;
var initialize_field                         = schema_helpers.initialize_field;
var initialize_field_array                   = schema_helpers.initialize_field_array;
var check_options_correctness_against_schema = schema_helpers.check_options_correctness_against_schema;
var _defaultTypeMap = require("lib/misc/factories_builtin_types")._defaultTypeMap;
var ec = require("lib/misc/encode_decode");
var encodeArray = ec.encodeArray;
var decodeArray = ec.decodeArray;
var makeExpandedNodeId = ec.makeExpandedNodeId;
var generate_new_id = require("lib/misc/factories").generate_new_id;
var _enumerations = require("lib/misc/factories_enumerations")._private._enumerations;
var schema = require("../schemas/QueryFirstResponse_schema").QueryFirstResponse_Schema;
var ResponseHeader = require("./_auto_generated_ResponseHeader").ResponseHeader;
var QueryDataSet = require("./_auto_generated_QueryDataSet").QueryDataSet;
var ParsingResult = require("./_auto_generated_ParsingResult").ParsingResult;
var DiagnosticInfo = require("./_auto_generated_DiagnosticInfo").DiagnosticInfo;
var ContentFilterResult = require("./_auto_generated_ContentFilterResult").ContentFilterResult;
var BaseUAObject = require("lib/misc/factories_baseobject").BaseUAObject;

/**
 * 
 * @class QueryFirstResponse
 * @constructor
 * @extends BaseUAObject
 * @param  options {Object}
 * @param  [options.responseHeader] {ResponseHeader} 
 * @param  [options.queryDataSet] {QueryDataSet[]} 
 * @param  [options.continuationPoint] {ContinuationPoint} 
 * @param  [options.parsingResult] {ParsingResult[]} 
 * @param  [options.diagnosticInfos] {DiagnosticInfo[]} 
 * @param  [options.filterResult] {ContentFilterResult} 
 */
function QueryFirstResponse(options)
{
    options = options || {};
    /* istanbul ignore next */
    if (schema_helpers.doDebug) { check_options_correctness_against_schema(this,schema,options); }
    var self = this;
    assert(this instanceof BaseUAObject); //  ' keyword "new" is required for constructor call')
    resolve_schema_field_types(schema);

    BaseUAObject.call(this,options);

    /**
      * 
      * @property responseHeader
      * @type {ResponseHeader}
      */
    self.responseHeader =  new ResponseHeader( options.responseHeader);

    /**
      * 
      * @property queryDataSet
      * @type {QueryDataSet[]}
      */
    self.queryDataSet = [];
    if (options.queryDataSet) {
        assert(_.isArray(options.queryDataSet));
        self.queryDataSet = options.queryDataSet.map(function(e){ return new QueryDataSet(e); } );
    }

    /**
      * 
      * @property continuationPoint
      * @type {ContinuationPoint}
      */
    self.continuationPoint = initialize_field(schema.fields[2], options.continuationPoint);

    /**
      * 
      * @property parsingResult
      * @type {ParsingResult[]}
      */
    self.parsingResult = [];
    if (options.parsingResult) {
        assert(_.isArray(options.parsingResult));
        self.parsingResult = options.parsingResult.map(function(e){ return new ParsingResult(e); } );
    }

    /**
      * 
      * @property diagnosticInfos
      * @type {DiagnosticInfo[]}
      */
    self.diagnosticInfos = [];
    if (options.diagnosticInfos) {
        assert(_.isArray(options.diagnosticInfos));
        self.diagnosticInfos = options.diagnosticInfos.map(function(e){ return new DiagnosticInfo(e); } );
    }

    /**
      * 
      * @property filterResult
      * @type {ContentFilterResult}
      */
    self.filterResult =  new ContentFilterResult( options.filterResult);

   // Object.preventExtensions(self);
}
util.inherits(QueryFirstResponse,BaseUAObject);
QueryFirstResponse.prototype.encodingDefaultBinary = makeExpandedNodeId(618,0);
QueryFirstResponse.prototype.encodingDefaultXml = makeExpandedNodeId(617,0);
QueryFirstResponse.prototype._schema = schema;

var encode_ContinuationPoint = _defaultTypeMap.ContinuationPoint.encode;
var decode_ContinuationPoint = _defaultTypeMap.ContinuationPoint.decode;
/**
 * encode the object into a binary stream
 * @method encode
 *
 * @param stream {BinaryStream} 
 */
QueryFirstResponse.prototype.encode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.encode.call(this,stream,options);
   this.responseHeader.encode(stream,options);
    encodeArray(this.queryDataSet,stream,function(obj,stream){ obj.encode(stream,options); }); 
    encode_ContinuationPoint(this.continuationPoint,stream);
    encodeArray(this.parsingResult,stream,function(obj,stream){ obj.encode(stream,options); }); 
    encodeArray(this.diagnosticInfos,stream,function(obj,stream){ obj.encode(stream,options); }); 
   this.filterResult.encode(stream,options);
};
QueryFirstResponse.prototype.decode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.decode.call(this,stream,options);
    this.responseHeader.decode(stream,options);
    this.queryDataSet = decodeArray(stream, function(stream) { 
       var obj = new QueryDataSet();
       obj.decode(stream,options);
       return obj; 
    });
    this.continuationPoint = decode_ContinuationPoint(stream,options);
    this.parsingResult = decodeArray(stream, function(stream) { 
       var obj = new ParsingResult();
       obj.decode(stream,options);
       return obj; 
    });
    this.diagnosticInfos = decodeArray(stream, function(stream) { 
       var obj = new DiagnosticInfo();
       obj.decode(stream,options);
       return obj; 
    });
    this.filterResult.decode(stream,options);
};
QueryFirstResponse.possibleFields = (function() {
    return [
        "responseHeader",
         "queryDataSet",
         "continuationPoint",
         "parsingResult",
         "diagnosticInfos",
         "filterResult"
    ];
})();


exports.QueryFirstResponse = QueryFirstResponse;
var register_class_definition = require("lib/misc/factories_factories").register_class_definition;
register_class_definition("QueryFirstResponse",QueryFirstResponse);
