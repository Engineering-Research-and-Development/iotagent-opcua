'use strict';

Object.defineProperty(exports, "__esModule", {
   value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _FormatText2 = require('../text/FormatText');

var _FormatText3 = _interopRequireDefault(_FormatText2);

var _StringUtil = require('../../../utils/StringUtil');

var _StringUtil2 = _interopRequireDefault(_StringUtil);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Provides a format transform for ModuleReport / ProjectReport instances converting them to a markdown string.
 */
var FormatMarkdown = function (_FormatText) {
   _inherits(FormatMarkdown, _FormatText);

   function FormatMarkdown() {
      var headers = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
      var keys = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
      var adjacencyFormatName = arguments.length <= 2 || arguments[2] === undefined ? 'markdown-adjacency' : arguments[2];
      var visibilityFormatName = arguments.length <= 3 || arguments[3] === undefined ? 'markdown-visibility' : arguments[3];

      _classCallCheck(this, FormatMarkdown);

      return _possibleConstructorReturn(this, Object.getPrototypeOf(FormatMarkdown).call(this, Object.assign(Object.assign({}, s_DEFAULT_HEADERS), headers), keys, adjacencyFormatName, visibilityFormatName));
   }

   /**
    * Gets the file extension.
    *
    * @returns {string}
    */


   _createClass(FormatMarkdown, [{
      key: 'extension',
      get: function get() {
         return 'md';
      }

      /**
       * Gets the format name.
       *
       * @returns {string}
       */

   }, {
      key: 'name',
      get: function get() {
         return 'markdown';
      }
   }]);

   return FormatMarkdown;
}(_FormatText3.default);

/**
 * Defines the default headers as text which are inserted via spread into `StringUtil.safeStringsObject`.
 * @type {{classMethod: *[], classReport: *[], entryPrepend: string, entryTemplateTag: function, moduleMethod: *[], moduleReport: *[], projectReport: string[]}}
 * @ignore
 */


exports.default = FormatMarkdown;
var s_DEFAULT_HEADERS = {
   classMethod: ['\n', new _StringUtil2.default.SafeEntry('* Class method: **', 'name', 1, '**', _StringUtil2.default.tagEscapeHTML)],

   classReport: ['\n', new _StringUtil2.default.SafeEntry('* Class: **', 'name', 1, '**', _StringUtil2.default.tagEscapeHTML)],

   entryPrepend: '* ',

   entryTemplateTag: _StringUtil2.default.tagEscapeHTML,

   moduleMethod: ['\n', new _StringUtil2.default.SafeEntry('* Module method: **', 'name', 1, '**', _StringUtil2.default.tagEscapeHTML)],

   moduleReport: ['\n', new _StringUtil2.default.SafeEntry('* Module ', '___modulecntrplus1___', 1, ':'), new _StringUtil2.default.SafeEntry('   * File path: `', 'filePath', 1, '`'), new _StringUtil2.default.SafeEntry('   * Source path: `', 'srcPath', 1, '`'), new _StringUtil2.default.SafeEntry('   * Source alias: `', 'srcPathAlias', 1, '`')],

   projectReport: ['* Project: \n']
};
module.exports = exports['default'];