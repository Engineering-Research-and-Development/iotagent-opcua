'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _AbstractTextMatrix2 = require('./AbstractTextMatrix');

var _AbstractTextMatrix3 = _interopRequireDefault(_AbstractTextMatrix2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Provides a format transform for ModuleReport / ProjectReport instances converting a matrix list into plain text.
 */
var FormatTextAdjacency = function (_AbstractTextMatrix) {
  _inherits(FormatTextAdjacency, _AbstractTextMatrix);

  function FormatTextAdjacency() {
    var headers = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var keys = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    _classCallCheck(this, FormatTextAdjacency);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(FormatTextAdjacency).call(this, Object.assign(Object.assign({}, s_DEFAULT_HEADERS), headers), Object.assign(Object.assign({}, s_DEFAULT_KEYS), keys)));
  }

  /**
   * Gets the file extension.
   *
   * @returns {string}
   */


  _createClass(FormatTextAdjacency, [{
    key: 'extension',
    get: function get() {
      return 'txt';
    }

    /**
     * Gets the format name.
     *
     * @returns {string}
     */

  }, {
    key: 'name',
    get: function get() {
      return 'text-adjacency';
    }

    /**
     * Gets the format type.
     *
     * @returns {string}
     */

  }, {
    key: 'type',
    get: function get() {
      return 'adjacency';
    }
  }]);

  return FormatTextAdjacency;
}(_AbstractTextMatrix3.default);

// Module private ---------------------------------------------------------------------------------------------------

/**
 * Defines the default matrix list key accessed.
 * @type {{matrixList: string}}
 * @ignore
 */


exports.default = FormatTextAdjacency;
var s_DEFAULT_KEYS = {
  matrixList: 'adjacencyList'
};

/**
 * Defines the default headers added to any output strings..
 * @type {{entryPrepend: string, entryWrapper: string, textHeader: string}}
 * @ignore
 */
var s_DEFAULT_HEADERS = {
  entryPrepend: '',
  entryWrapper: '',
  textHeader: 'Adjacency (dependencies / numerical indices correspond to ProjectReport modules / reports):\n'
};
module.exports = exports['default'];