'use strict';

Object.defineProperty(exports, "__esModule", {
   value: true
});

var _Enum2 = require('../utils/Enum');

var _Enum3 = _interopRequireDefault(_Enum2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ReportType = function (_Enum) {
   _inherits(ReportType, _Enum);

   function ReportType() {
      _classCallCheck(this, ReportType);

      return _possibleConstructorReturn(this, Object.getPrototypeOf(ReportType).apply(this, arguments));
   }

   return ReportType;
}(_Enum3.default);

exports.default = ReportType;


ReportType.initEnum({
   CLASS: { description: 'Class' },
   CLASS_METHOD: { description: 'Class Method' },
   MODULE_METHOD: { description: 'Module Method' },
   MODULE: { description: 'Module' },
   PROJECT: { description: 'Project' }
});
module.exports = exports['default'];