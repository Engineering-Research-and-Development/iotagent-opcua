'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Provides a wrapper around a data field which may be an array, function or other primitive value.
 */
var Trait = function () {
  /**
   * Initializes trait data.
   *
   * @param {string}   metric - The name of Halstead metric being stored.
   * @param {*}        data - Data to wrap.
   */
  function Trait(metric, data) {
    _classCallCheck(this, Trait);

    /* istanbul ignore if */
    if (typeof metric !== 'string') {
      throw new TypeError('ctor error: metric is not a `string`.');
    }

    /**
     * Stores the data to wrap.
     * @type {*}
     * @private
     */
    this._data = data;

    /**
     * Stores the Trait metric type.
     * @type {string}
     * @private
     */
    this._metric = metric;
  }

  /**
   * Returns the associated metric type.
   *
   * @returns {string}
   */


  _createClass(Trait, [{
    key: 'valueOf',


    /**
     * Returns the value of the given data. If the wrapped data is a function it is invoked with the given `params`
     * otherwise the data is returned directly. If the wrapped data is an array a mapped version is returned
     * with each entry that is a function being invoked with the given `params`.
     *
     * @param {*}  params - Provides parameters which are forwarded onto any data stored as a function. Normally
     *                      `params` should be the `current AST node, parent AST node, ... optional data`.
     *
     * @returns {*}
     */
    value: function valueOf() {
      for (var _len = arguments.length, params = Array(_len), _key = 0; _key < _len; _key++) {
        params[_key] = arguments[_key];
      }

      if (Array.isArray(this._data)) {
        return this._data.map(function (entry) {
          return typeof entry === 'function' ? entry.apply(undefined, params) : entry;
        });
      }

      return typeof this._data === 'function' ? this._data.apply(this, params) : this._data;
    }
  }, {
    key: 'metric',
    get: function get() {
      return this._metric;
    }

    /**
     * Returns the typeof data being wrapped.
     *
     * @returns {string}
     */

  }, {
    key: 'type',
    get: function get() {
      return _typeof(this._data);
    }
  }]);

  return Trait;
}();

exports.default = Trait;
module.exports = exports['default'];