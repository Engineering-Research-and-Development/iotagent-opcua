'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Provides all Halstead metric data / parameters.
 * @see https://en.wikipedia.org/wiki/Halstead_complexity_measures
 */
var HalsteadData = function () {
  /**
   * Initializes the default Halstead data.
   */
  function HalsteadData() {
    _classCallCheck(this, HalsteadData);

    /**
     * Measures an estimate for the number of potential errors.
     * @type {number}
     */
    this.bugs = 0;

    /**
     * Measures the difficulty of the program to write or understand.
     * @type {number}
     */
    this.difficulty = 0;

    /**
     * Measures the maintenance effort of the program.
     * @type {number}
     */
    this.effort = 0;

    /**
     * Defines the number of operands and operators.
     * @type {number}
     */
    this.length = 0;

    /**
     * Measures potential coding time.
     * @type {number}
     */
    this.time = 0;

    /**
     * Defines the unique number of operands and operators.
     * @type {number}
     */
    this.vocabulary = 0;

    /**
     * Measures how much information a reader of the code potential has to absorb to understand its meaning.
     * @type {number}
     */
    this.volume = 0;

    /**
     * In general an operand participates in actions associated with operators. A distinct and total count is provided
     * with all identifiers.
     * @type {{distinct: number, total: number, identifiers: Array<string>}}
     */
    this.operands = { distinct: 0, total: 0, identifiers: [] };

    /**
     * In general an operator carries out an action. A distinct and total count is provided with all identifiers.
     * @type {{distinct: number, total: number, identifiers: Array<string>}}
     */
    this.operators = { distinct: 0, total: 0, identifiers: [] };
  }

  /**
   * Resets the state of all Halstead data metrics without removing any operand or operator data.
   *
   * @param {boolean}  clearIdentifiers - Clears operands / operators; default: false.
   *
   * @returns {HalsteadData}
   */


  _createClass(HalsteadData, [{
    key: 'reset',
    value: function reset() {
      var _this = this;

      var clearIdentifiers = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];

      Object.keys(this).forEach(function (key) {
        if (typeof _this[key] === 'number') {
          _this[key] = 0;
        }
      });

      if (clearIdentifiers) {
        this.operands = { distinct: 0, total: 0, identifiers: [] };
        this.operators = { distinct: 0, total: 0, identifiers: [] };
      }

      return this;
    }
  }]);

  return HalsteadData;
}();

exports.default = HalsteadData;
module.exports = exports['default'];