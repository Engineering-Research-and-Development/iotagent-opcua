'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _AbstractReport2 = require('./AbstractReport');

var _AbstractReport3 = _interopRequireDefault(_AbstractReport2);

var _HalsteadData = require('./HalsteadData');

var _HalsteadData2 = _interopRequireDefault(_HalsteadData);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Provides the aggregate report object which stores base data pertaining to a single method / function or cumulative
 * aggregate data for a ModuleReport / ClassReport.
 */
var AggregateMethodReport = function (_AbstractReport) {
  _inherits(AggregateMethodReport, _AbstractReport);

  /**
   * Initializes aggregate report.
   *
   * @param {number}   lineStart - Start line of method.
   * @param {number}   lineEnd - End line of method.
   */
  function AggregateMethodReport() {
    var lineStart = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];
    var lineEnd = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];

    _classCallCheck(this, AggregateMethodReport);

    /**
     * The cyclomatic complexity of the method.
     * @type {number}
     */
    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(AggregateMethodReport).call(this));

    _this.cyclomatic = 1;

    /**
     * The cyclomatic density of the method.
     * @type {number}
     */
    _this.cyclomaticDensity = 0;

    /**
     * Stores the Halstead data instance.
     * @type {HalsteadData}
     */
    _this.halstead = new _HalsteadData2.default();

    /**
     * The number of parameters for the method or aggregate report.
     * @type {number}
     */
    _this.params = 0;

    /**
     * The source lines of code for the method.
     * @type {{logical: number, physical: number}}
     */
    _this.sloc = { logical: 0, physical: lineEnd - lineStart + 1 };
    return _this;
  }

  return AggregateMethodReport;
}(_AbstractReport3.default);

exports.default = AggregateMethodReport;
module.exports = exports['default'];