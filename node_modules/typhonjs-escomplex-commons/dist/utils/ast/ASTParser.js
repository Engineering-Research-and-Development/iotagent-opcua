'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ASTState = require('./ASTState');

var _ASTState2 = _interopRequireDefault(_ASTState);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * `ASTParser` is a fork of `Astring`. The original author is David Bonnet and `Astring` is released under an MIT
 * license. This version is only available by the MPLv2.0 license. Please see the original source.
 * @see  https://github.com/davidbonnet/astring.git
 *
 * Eventually once ASTParser is feature complete for Babylon & ESTree AST and further modularized it will be released
 * as a separate NPM module supporting plugins.
 *
 * Please note that not all of the Babylon AST nodes are currently supported. `astParser` is currently only used by
 * `typhonjs-escomplex` for realizing computed method names and associated Halstead operands and operators.
 *
 */
var ASTParser = function () {
  function ASTParser() {
    _classCallCheck(this, ASTParser);
  }

  _createClass(ASTParser, null, [{
    key: 'parse',

    /**
     * ASTParser returns an instance of ParserData containing a string representing the rendered code of the provided AST
     * `node`. In addition Halstead operators and operands are available via ParserData.
     *
     * @param {object}      node - An ESTree or Babylon AST node.
     *
     * @param {object}      options - Optional parameters for source code formatting.
     * @property {string}   indent - A string to use for indentation (defaults to `\t`)
     * @property {string}   lineEnd - A string to use for line endings (defaults to `\n`)
     * @property {number}   startingIndentLevel - indent level to start from (default to `0`)
     *
     * @returns {ASTData}
     */
    value: function parse(node, options) {
      var state = new _ASTState2.default(options);

      // Travel through the AST node and generate the code.
      state.generator[node.type](node, state);

      return state.output;
    }
  }]);

  return ASTParser;
}();

exports.default = ASTParser;
module.exports = exports['default'];